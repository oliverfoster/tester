(function () {
    var t = this;
    var e = t.Backbone;
    var i = [];
    var r = i.push;
    var s = i.slice;
    var n = i.splice;
    var a;
    if (typeof exports !== 'undefined')
        a = exports;
    else
        a = t.Backbone = {};
    a.VERSION = '1.0.0';
    var h = t._;
    if (!h && typeof require !== 'undefined')
        h = require('underscore');
    a.$ = t.jQuery || (t.Zepto || (t.ender || t.$));
    a.noConflict = function () {
        t.Backbone = e;
        return this;
    };
    a.emulateHTTP = false;
    a.emulateJSON = false;
    var o = a.Events = {
        on: function (t, e, i) {
            if (!l(this, 'on', t, [
                    e,
                    i
                ]) || !e)
                return this;
            this._events || (this._events = {});
            var r = this._events[t] || (this._events[t] = []);
            r.push({
                callback: e,
                context: i,
                ctx: i || this
            });
            return this;
        },
        once: function (t, e, i) {
            if (!l(this, 'once', t, [
                    e,
                    i
                ]) || !e)
                return this;
            var r = this;
            var s = h.once(function () {
                r.off(t, s);
                e.apply(this, arguments);
            });
            s._callback = e;
            return this.on(t, s, i);
        },
        off: function (t, e, i) {
            var r, s, n, a, o, u, c, f;
            if (!this._events || !l(this, 'off', t, [
                    e,
                    i
                ]))
                return this;
            if (!t && (!e && !i)) {
                this._events = {};
                return this;
            }
            a = t ? [t] : h.keys(this._events);
            for (o = 0, u = a.length; o < u; o++) {
                t = a[o];
                if (n = this._events[t]) {
                    this._events[t] = r = [];
                    if (e || i)
                        for (c = 0, f = n.length; c < f; c++) {
                            s = n[c];
                            if (e && (e !== s.callback && e !== s.callback._callback) || i && i !== s.context)
                                r.push(s);
                        }
                    if (!r.length)
                        delete this._events[t];
                }
            }
            return this;
        },
        trigger: function (t) {
            if (!this._events)
                return this;
            var e = s.call(arguments, 1);
            if (!l(this, 'trigger', t, e))
                return this;
            var i = this._events[t];
            var r = this._events.all;
            if (i)
                c(i, e);
            if (r)
                c(r, arguments);
            return this;
        },
        stopListening: function (t, e, i) {
            var r = this._listeners;
            if (!r)
                return this;
            var s = !e && !i;
            if (typeof e === 'object')
                i = this;
            if (t)
                (r = {})[t._listenerId] = t;
            for (var n in r) {
                r[n].off(e, i, this);
                if (s)
                    delete this._listeners[n];
            }
            return this;
        }
    };
    var u = /\s+/;
    var l = function (t, e, i, r) {
        if (!i)
            return true;
        if (typeof i === 'object') {
            for (var s in i)
                t[e].apply(t, [
                    s,
                    i[s]
                ].concat(r));
            return false;
        }
        if (u.test(i)) {
            var n = i.split(u);
            for (var a = 0, h = n.length; a < h; a++)
                t[e].apply(t, [n[a]].concat(r));
            return false;
        }
        return true;
    };
    var c = function (t, e) {
        var i, r = -1, s = t.length, n = e[0], a = e[1], h = e[2];
        switch (e.length) {
        case 0:
            while (++r < s)
                (i = t[r]).callback.call(i.ctx);
            return;
        case 1:
            while (++r < s)
                (i = t[r]).callback.call(i.ctx, n);
            return;
        case 2:
            while (++r < s)
                (i = t[r]).callback.call(i.ctx, n, a);
            return;
        case 3:
            while (++r < s)
                (i = t[r]).callback.call(i.ctx, n, a, h);
            return;
        default:
            while (++r < s)
                (i = t[r]).callback.apply(i.ctx, e);
        }
    };
    var f = {
        listenTo: 'on',
        listenToOnce: 'once'
    };
    h.each(f, function (t, e) {
        o[e] = function (e, i, r) {
            var s = this._listeners || (this._listeners = {});
            var n = e._listenerId || (e._listenerId = h.uniqueId('l'));
            s[n] = e;
            if (typeof i === 'object')
                r = this;
            e[t](i, r, this);
            return this;
        };
    });
    o.bind = o.on;
    o.unbind = o.off;
    h.extend(a, o);
    var d = a.Model = function (t, e) {
        var i;
        var r = t || {};
        e || (e = {});
        this.cid = h.uniqueId('c');
        this.attributes = {};
        h.extend(this, h.pick(e, p));
        if (e.parse)
            r = this.parse(r, e) || {};
        if (i = h.result(this, 'defaults'))
            r = h.defaults({}, r, i);
        this.set(r, e);
        this.changed = {};
        this.initialize.apply(this, arguments);
    };
    var p = [
        'url',
        'urlRoot',
        'collection'
    ];
    h.extend(d.prototype, o, {
        changed: null,
        validationError: null,
        idAttribute: 'id',
        initialize: function () {
        },
        toJSON: function (t) {
            return h.clone(this.attributes);
        },
        sync: function () {
            return a.sync.apply(this, arguments);
        },
        get: function (t) {
            return this.attributes[t];
        },
        escape: function (t) {
            return h.escape(this.get(t));
        },
        has: function (t) {
            return this.get(t) != null;
        },
        set: function (t, e, i) {
            var r, s, n, a, o, u, l, c;
            if (t == null)
                return this;
            if (typeof t === 'object') {
                s = t;
                i = e;
            } else
                (s = {})[t] = e;
            i || (i = {});
            if (!this._validate(s, i))
                return false;
            n = i.unset;
            o = i.silent;
            a = [];
            u = this._changing;
            this._changing = true;
            if (!u) {
                this._previousAttributes = h.clone(this.attributes);
                this.changed = {};
            }
            c = this.attributes, l = this._previousAttributes;
            if (this.idAttribute in s)
                this.id = s[this.idAttribute];
            for (r in s) {
                e = s[r];
                if (!h.isEqual(c[r], e))
                    a.push(r);
                if (!h.isEqual(l[r], e))
                    this.changed[r] = e;
                else
                    delete this.changed[r];
                n ? delete c[r] : c[r] = e;
            }
            if (!o) {
                if (a.length)
                    this._pending = true;
                for (var f = 0, d = a.length; f < d; f++)
                    this.trigger('change:' + a[f], this, c[a[f]], i);
            }
            if (u)
                return this;
            if (!o)
                while (this._pending) {
                    this._pending = false;
                    this.trigger('change', this, i);
                }
            this._pending = false;
            this._changing = false;
            return this;
        },
        unset: function (t, e) {
            return this.set(t, void 0, h.extend({}, e, { unset: true }));
        },
        clear: function (t) {
            var e = {};
            for (var i in this.attributes)
                e[i] = void 0;
            return this.set(e, h.extend({}, t, { unset: true }));
        },
        hasChanged: function (t) {
            if (t == null)
                return !h.isEmpty(this.changed);
            return h.has(this.changed, t);
        },
        changedAttributes: function (t) {
            if (!t)
                return this.hasChanged() ? h.clone(this.changed) : false;
            var e, i = false;
            var r = this._changing ? this._previousAttributes : this.attributes;
            for (var s in t) {
                if (h.isEqual(r[s], e = t[s]))
                    continue;
                (i || (i = {}))[s] = e;
            }
            return i;
        },
        previous: function (t) {
            if (t == null || !this._previousAttributes)
                return null;
            return this._previousAttributes[t];
        },
        previousAttributes: function () {
            return h.clone(this._previousAttributes);
        },
        fetch: function (t) {
            t = t ? h.clone(t) : {};
            if (t.parse === void 0)
                t.parse = true;
            var e = this;
            var i = t.success;
            t.success = function (r) {
                if (!e.set(e.parse(r, t), t))
                    return false;
                if (i)
                    i(e, r, t);
                e.trigger('sync', e, r, t);
            };
            R(this, t);
            return this.sync('read', this, t);
        },
        save: function (t, e, i) {
            var r, s, n, a = this.attributes;
            if (t == null || typeof t === 'object') {
                r = t;
                i = e;
            } else
                (r = {})[t] = e;
            if (r && ((!i || !i.wait) && !this.set(r, i)))
                return false;
            i = h.extend({ validate: true }, i);
            if (!this._validate(r, i))
                return false;
            if (r && i.wait)
                this.attributes = h.extend({}, a, r);
            if (i.parse === void 0)
                i.parse = true;
            var o = this;
            var u = i.success;
            i.success = function (t) {
                o.attributes = a;
                var e = o.parse(t, i);
                if (i.wait)
                    e = h.extend(r || {}, e);
                if (h.isObject(e) && !o.set(e, i))
                    return false;
                if (u)
                    u(o, t, i);
                o.trigger('sync', o, t, i);
            };
            R(this, i);
            s = this.isNew() ? 'create' : i.patch ? 'patch' : 'update';
            if (s === 'patch')
                i.attrs = r;
            n = this.sync(s, this, i);
            if (r && i.wait)
                this.attributes = a;
            return n;
        },
        destroy: function (t) {
            t = t ? h.clone(t) : {};
            var e = this;
            var i = t.success;
            var r = function () {
                e.trigger('destroy', e, e.collection, t);
            };
            t.success = function (s) {
                if (t.wait || e.isNew())
                    r();
                if (i)
                    i(e, s, t);
                if (!e.isNew())
                    e.trigger('sync', e, s, t);
            };
            if (this.isNew()) {
                t.success();
                return false;
            }
            R(this, t);
            var s = this.sync('delete', this, t);
            if (!t.wait)
                r();
            return s;
        },
        url: function () {
            var t = h.result(this, 'urlRoot') || (h.result(this.collection, 'url') || U());
            if (this.isNew())
                return t;
            return t + (t.charAt(t.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);
        },
        parse: function (t, e) {
            return t;
        },
        clone: function () {
            return new this.constructor(this.attributes);
        },
        isNew: function () {
            return this.id == null;
        },
        isValid: function (t) {
            return this._validate({}, h.extend(t || {}, { validate: true }));
        },
        _validate: function (t, e) {
            if (!e.validate || !this.validate)
                return true;
            t = h.extend({}, this.attributes, t);
            var i = this.validationError = this.validate(t, e) || null;
            if (!i)
                return true;
            this.trigger('invalid', this, i, h.extend(e || {}, { validationError: i }));
            return false;
        }
    });
    var v = [
        'keys',
        'values',
        'pairs',
        'invert',
        'pick',
        'omit'
    ];
    h.each(v, function (t) {
        d.prototype[t] = function () {
            var e = s.call(arguments);
            e.unshift(this.attributes);
            return h[t].apply(h, e);
        };
    });
    var g = a.Collection = function (t, e) {
        e || (e = {});
        if (e.url)
            this.url = e.url;
        if (e.model)
            this.model = e.model;
        if (e.comparator !== void 0)
            this.comparator = e.comparator;
        this._reset();
        this.initialize.apply(this, arguments);
        if (t)
            this.reset(t, h.extend({ silent: true }, e));
    };
    var m = {
        add: true,
        remove: true,
        merge: true
    };
    var y = {
        add: true,
        merge: false,
        remove: false
    };
    h.extend(g.prototype, o, {
        model: d,
        initialize: function () {
        },
        toJSON: function (t) {
            return this.map(function (e) {
                return e.toJSON(t);
            });
        },
        sync: function () {
            return a.sync.apply(this, arguments);
        },
        add: function (t, e) {
            return this.set(t, h.defaults(e || {}, y));
        },
        remove: function (t, e) {
            t = h.isArray(t) ? t.slice() : [t];
            e || (e = {});
            var i, r, s, n;
            for (i = 0, r = t.length; i < r; i++) {
                n = this.get(t[i]);
                if (!n)
                    continue;
                delete this._byId[n.id];
                delete this._byId[n.cid];
                s = this.indexOf(n);
                this.models.splice(s, 1);
                this.length--;
                if (!e.silent) {
                    e.index = s;
                    n.trigger('remove', n, this, e);
                }
                this._removeReference(n);
            }
            return this;
        },
        set: function (t, e) {
            e = h.defaults(e || {}, m);
            if (e.parse)
                t = this.parse(t, e);
            if (!h.isArray(t))
                t = t ? [t] : [];
            var i, s, a, o, u, l;
            var c = e.at;
            var f = this.comparator && (c == null && e.sort !== false);
            var d = h.isString(this.comparator) ? this.comparator : null;
            var p = [], v = [], g = {};
            for (i = 0, s = t.length; i < s; i++) {
                if (!(a = this._prepareModel(t[i], e)))
                    continue;
                if (u = this.get(a)) {
                    if (e.remove)
                        g[u.cid] = true;
                    if (e.merge) {
                        u.set(a.attributes, e);
                        if (f && (!l && u.hasChanged(d)))
                            l = true;
                    }
                } else if (e.add) {
                    p.push(a);
                    a.on('all', this._onModelEvent, this);
                    this._byId[a.cid] = a;
                    if (a.id != null)
                        this._byId[a.id] = a;
                }
            }
            if (e.remove) {
                for (i = 0, s = this.length; i < s; ++i)
                    if (!g[(a = this.models[i]).cid])
                        v.push(a);
                if (v.length)
                    this.remove(v, e);
            }
            if (p.length) {
                if (f)
                    l = true;
                this.length += p.length;
                if (c != null)
                    n.apply(this.models, [
                        c,
                        0
                    ].concat(p));
                else
                    r.apply(this.models, p);
            }
            if (l)
                this.sort({ silent: true });
            if (e.silent)
                return this;
            for (i = 0, s = p.length; i < s; i++)
                (a = p[i]).trigger('add', a, this, e);
            if (l)
                this.trigger('sort', this, e);
            return this;
        },
        reset: function (t, e) {
            e || (e = {});
            for (var i = 0, r = this.models.length; i < r; i++)
                this._removeReference(this.models[i]);
            e.previousModels = this.models;
            this._reset();
            this.add(t, h.extend({ silent: true }, e));
            if (!e.silent)
                this.trigger('reset', this, e);
            return this;
        },
        push: function (t, e) {
            t = this._prepareModel(t, e);
            this.add(t, h.extend({ at: this.length }, e));
            return t;
        },
        pop: function (t) {
            var e = this.at(this.length - 1);
            this.remove(e, t);
            return e;
        },
        unshift: function (t, e) {
            t = this._prepareModel(t, e);
            this.add(t, h.extend({ at: 0 }, e));
            return t;
        },
        shift: function (t) {
            var e = this.at(0);
            this.remove(e, t);
            return e;
        },
        slice: function (t, e) {
            return this.models.slice(t, e);
        },
        get: function (t) {
            if (t == null)
                return void 0;
            return this._byId[t.id != null ? t.id : t.cid || t];
        },
        at: function (t) {
            return this.models[t];
        },
        where: function (t, e) {
            if (h.isEmpty(t))
                return e ? void 0 : [];
            return this[e ? 'find' : 'filter'](function (e) {
                for (var i in t)
                    if (t[i] !== e.get(i))
                        return false;
                return true;
            });
        },
        findWhere: function (t) {
            return this.where(t, true);
        },
        sort: function (t) {
            if (!this.comparator)
                throw new Error('Cannot sort a set without a comparator');
            t || (t = {});
            if (h.isString(this.comparator) || this.comparator.length === 1)
                this.models = this.sortBy(this.comparator, this);
            else
                this.models.sort(h.bind(this.comparator, this));
            if (!t.silent)
                this.trigger('sort', this, t);
            return this;
        },
        sortedIndex: function (t, e, i) {
            e || (e = this.comparator);
            var r = h.isFunction(e) ? e : function (t) {
                return t.get(e);
            };
            return h.sortedIndex(this.models, t, r, i);
        },
        pluck: function (t) {
            return h.invoke(this.models, 'get', t);
        },
        fetch: function (t) {
            t = t ? h.clone(t) : {};
            if (t.parse === void 0)
                t.parse = true;
            var e = t.success;
            var i = this;
            t.success = function (r) {
                var s = t.reset ? 'reset' : 'set';
                i[s](r, t);
                if (e)
                    e(i, r, t);
                i.trigger('sync', i, r, t);
            };
            R(this, t);
            return this.sync('read', this, t);
        },
        create: function (t, e) {
            e = e ? h.clone(e) : {};
            if (!(t = this._prepareModel(t, e)))
                return false;
            if (!e.wait)
                this.add(t, e);
            var i = this;
            var r = e.success;
            e.success = function (s) {
                if (e.wait)
                    i.add(t, e);
                if (r)
                    r(t, s, e);
            };
            t.save(null, e);
            return t;
        },
        parse: function (t, e) {
            return t;
        },
        clone: function () {
            return new this.constructor(this.models);
        },
        _reset: function () {
            this.length = 0;
            this.models = [];
            this._byId = {};
        },
        _prepareModel: function (t, e) {
            if (t instanceof d) {
                if (!t.collection)
                    t.collection = this;
                return t;
            }
            e || (e = {});
            e.collection = this;
            var i = new this.model(t, e);
            if (!i._validate(t, e)) {
                this.trigger('invalid', this, t, e);
                return false;
            }
            return i;
        },
        _removeReference: function (t) {
            if (this === t.collection)
                delete t.collection;
            t.off('all', this._onModelEvent, this);
        },
        _onModelEvent: function (t, e, i, r) {
            if ((t === 'add' || t === 'remove') && i !== this)
                return;
            if (t === 'destroy')
                this.remove(e, r);
            if (e && t === 'change:' + e.idAttribute) {
                delete this._byId[e.previous(e.idAttribute)];
                if (e.id != null)
                    this._byId[e.id] = e;
            }
            this.trigger.apply(this, arguments);
        }
    });
    var _ = [
        'forEach',
        'each',
        'map',
        'collect',
        'reduce',
        'foldl',
        'inject',
        'reduceRight',
        'foldr',
        'find',
        'detect',
        'filter',
        'select',
        'reject',
        'every',
        'all',
        'some',
        'any',
        'include',
        'contains',
        'invoke',
        'max',
        'min',
        'toArray',
        'size',
        'first',
        'head',
        'take',
        'initial',
        'rest',
        'tail',
        'drop',
        'last',
        'without',
        'indexOf',
        'shuffle',
        'lastIndexOf',
        'isEmpty',
        'chain'
    ];
    h.each(_, function (t) {
        g.prototype[t] = function () {
            var e = s.call(arguments);
            e.unshift(this.models);
            return h[t].apply(h, e);
        };
    });
    var w = [
        'groupBy',
        'countBy',
        'sortBy'
    ];
    h.each(w, function (t) {
        g.prototype[t] = function (e, i) {
            var r = h.isFunction(e) ? e : function (t) {
                return t.get(e);
            };
            return h[t](this.models, r, i);
        };
    });
    var b = a.View = function (t) {
        this.cid = h.uniqueId('view');
        this._configure(t || {});
        this._ensureElement();
        this.initialize.apply(this, arguments);
        this.delegateEvents();
    };
    var x = /^(\S+)\s*(.*)$/;
    var E = [
        'model',
        'collection',
        'el',
        'id',
        'attributes',
        'className',
        'tagName',
        'events'
    ];
    h.extend(b.prototype, o, {
        tagName: 'div',
        $: function (t) {
            return this.$el.find(t);
        },
        initialize: function () {
        },
        render: function () {
            return this;
        },
        remove: function () {
            this.$el.remove();
            this.stopListening();
            return this;
        },
        setElement: function (t, e) {
            if (this.$el)
                this.undelegateEvents();
            this.$el = t instanceof a.$ ? t : a.$(t);
            this.el = this.$el[0];
            if (e !== false)
                this.delegateEvents();
            return this;
        },
        delegateEvents: function (t) {
            if (!(t || (t = h.result(this, 'events'))))
                return this;
            this.undelegateEvents();
            for (var e in t) {
                var i = t[e];
                if (!h.isFunction(i))
                    i = this[t[e]];
                if (!i)
                    continue;
                var r = e.match(x);
                var s = r[1], n = r[2];
                i = h.bind(i, this);
                s += '.delegateEvents' + this.cid;
                if (n === '')
                    this.$el.on(s, i);
                else
                    this.$el.on(s, n, i);
            }
            return this;
        },
        undelegateEvents: function () {
            this.$el.off('.delegateEvents' + this.cid);
            return this;
        },
        _configure: function (t) {
            if (this.options)
                t = h.extend({}, h.result(this, 'options'), t);
            h.extend(this, h.pick(t, E));
            this.options = t;
        },
        _ensureElement: function () {
            if (!this.el) {
                var t = h.extend({}, h.result(this, 'attributes'));
                if (this.id)
                    t.id = h.result(this, 'id');
                if (this.className)
                    t['class'] = h.result(this, 'className');
                var e = a.$('<' + h.result(this, 'tagName') + '>').attr(t);
                this.setElement(e, false);
            } else
                this.setElement(h.result(this, 'el'), false);
        }
    });
    a.sync = function (t, e, i) {
        var r = k[t];
        h.defaults(i || (i = {}), {
            emulateHTTP: a.emulateHTTP,
            emulateJSON: a.emulateJSON
        });
        var s = {
            type: r,
            dataType: 'json'
        };
        if (!i.url)
            s.url = h.result(e, 'url') || U();
        if (i.data == null && (e && (t === 'create' || (t === 'update' || t === 'patch')))) {
            s.contentType = 'application/json';
            s.data = JSON.stringify(i.attrs || e.toJSON(i));
        }
        if (i.emulateJSON) {
            s.contentType = 'application/x-www-form-urlencoded';
            s.data = s.data ? { model: s.data } : {};
        }
        if (i.emulateHTTP && (r === 'PUT' || (r === 'DELETE' || r === 'PATCH'))) {
            s.type = 'POST';
            if (i.emulateJSON)
                s.data._method = r;
            var n = i.beforeSend;
            i.beforeSend = function (t) {
                t.setRequestHeader('X-HTTP-Method-Override', r);
                if (n)
                    return n.apply(this, arguments);
            };
        }
        if (s.type !== 'GET' && !i.emulateJSON)
            s.processData = false;
        if (s.type === 'PATCH' && (window.ActiveXObject && !(window.external && window.external.msActiveXFilteringEnabled)))
            s.xhr = function () {
                return new ActiveXObject('Microsoft.XMLHTTP');
            };
        var o = i.xhr = a.ajax(h.extend(s, i));
        e.trigger('request', e, o, i);
        return o;
    };
    var k = {
        create: 'POST',
        update: 'PUT',
        patch: 'PATCH',
        'delete': 'DELETE',
        read: 'GET'
    };
    a.ajax = function () {
        return a.$.ajax.apply(a.$, arguments);
    };
    var S = a.Router = function (t) {
        t || (t = {});
        if (t.routes)
            this.routes = t.routes;
        this._bindRoutes();
        this.initialize.apply(this, arguments);
    };
    var $ = /\((.*?)\)/g;
    var T = /(\(\?)?:\w+/g;
    var H = /\*\w+/g;
    var A = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    h.extend(S.prototype, o, {
        initialize: function () {
        },
        route: function (t, e, i) {
            if (!h.isRegExp(t))
                t = this._routeToRegExp(t);
            if (h.isFunction(e)) {
                i = e;
                e = '';
            }
            if (!i)
                i = this[e];
            var r = this;
            a.history.route(t, function (s) {
                var n = r._extractParameters(t, s);
                i && i.apply(r, n);
                r.trigger.apply(r, ['route:' + e].concat(n));
                r.trigger('route', e, n);
                a.history.trigger('route', r, e, n);
            });
            return this;
        },
        navigate: function (t, e) {
            a.history.navigate(t, e);
            return this;
        },
        _bindRoutes: function () {
            if (!this.routes)
                return;
            this.routes = h.result(this, 'routes');
            var t, e = h.keys(this.routes);
            while ((t = e.pop()) != null)
                this.route(t, this.routes[t]);
        },
        _routeToRegExp: function (t) {
            t = t.replace(A, '\\$&').replace($, '(?:$1)?').replace(T, function (t, e) {
                return e ? t : '([^/]+)';
            }).replace(H, '(.*?)');
            return new RegExp('^' + t + '$');
        },
        _extractParameters: function (t, e) {
            var i = t.exec(e).slice(1);
            return h.map(i, function (t) {
                return t ? decodeURIComponent(t) : null;
            });
        }
    });
    var I = a.History = function () {
        this.handlers = [];
        h.bindAll(this, 'checkUrl');
        if (typeof window !== 'undefined') {
            this.location = window.location;
            this.history = window.history;
        }
    };
    var N = /^[#\/]|\s+$/g;
    var P = /^\/+|\/+$/g;
    var O = /msie [\w.]+/;
    var C = /\/$/;
    I.started = false;
    h.extend(I.prototype, o, {
        interval: 50,
        getHash: function (t) {
            var e = (t || this).location.href.match(/#(.*)$/);
            return e ? e[1] : '';
        },
        getFragment: function (t, e) {
            if (t == null)
                if (this._hasPushState || (!this._wantsHashChange || e)) {
                    t = this.location.pathname;
                    var i = this.root.replace(C, '');
                    if (!t.indexOf(i))
                        t = t.substr(i.length);
                } else
                    t = this.getHash();
            return t.replace(N, '');
        },
        start: function (t) {
            if (I.started)
                throw new Error('Backbone.history has already been started');
            I.started = true;
            this.options = h.extend({}, { root: '/' }, this.options, t);
            this.root = this.options.root;
            this._wantsHashChange = this.options.hashChange !== false;
            this._wantsPushState = !!this.options.pushState;
            this._hasPushState = !!(this.options.pushState && (this.history && this.history.pushState));
            var e = this.getFragment();
            var i = document.documentMode;
            var r = O.exec(navigator.userAgent.toLowerCase()) && (!i || i <= 7);
            this.root = ('/' + this.root + '/').replace(P, '/');
            if (r && this._wantsHashChange) {
                this.iframe = a.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
                this.navigate(e);
            }
            if (this._hasPushState)
                a.$(window).on('popstate', this.checkUrl);
            else if (this._wantsHashChange && ('onhashchange' in window && !r))
                a.$(window).on('hashchange', this.checkUrl);
            else if (this._wantsHashChange)
                this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
            this.fragment = e;
            var s = this.location;
            var n = s.pathname.replace(/[^\/]$/, '$&/') === this.root;
            if (this._wantsHashChange && (this._wantsPushState && (!this._hasPushState && !n))) {
                this.fragment = this.getFragment(null, true);
                this.location.replace(this.root + this.location.search + '#' + this.fragment);
                return true;
            } else if (this._wantsPushState && (this._hasPushState && (n && s.hash))) {
                this.fragment = this.getHash().replace(N, '');
                this.history.replaceState({}, document.title, this.root + this.fragment + s.search);
            }
            if (!this.options.silent)
                return this.loadUrl();
        },
        stop: function () {
            a.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
            clearInterval(this._checkUrlInterval);
            I.started = false;
        },
        route: function (t, e) {
            this.handlers.unshift({
                route: t,
                callback: e
            });
        },
        checkUrl: function (t) {
            var e = this.getFragment();
            if (e === this.fragment && this.iframe)
                e = this.getFragment(this.getHash(this.iframe));
            if (e === this.fragment)
                return false;
            if (this.iframe)
                this.navigate(e);
            this.loadUrl() || this.loadUrl(this.getHash());
        },
        loadUrl: function (t) {
            var e = this.fragment = this.getFragment(t);
            var i = h.any(this.handlers, function (t) {
                if (t.route.test(e)) {
                    t.callback(e);
                    return true;
                }
            });
            return i;
        },
        navigate: function (t, e) {
            if (!I.started)
                return false;
            if (!e || e === true)
                e = { trigger: e };
            t = this.getFragment(t || '');
            if (this.fragment === t)
                return;
            this.fragment = t;
            var i = this.root + t;
            if (this._hasPushState)
                this.history[e.replace ? 'replaceState' : 'pushState']({}, document.title, i);
            else if (this._wantsHashChange) {
                this._updateHash(this.location, t, e.replace);
                if (this.iframe && t !== this.getFragment(this.getHash(this.iframe))) {
                    if (!e.replace)
                        this.iframe.document.open().close();
                    this._updateHash(this.iframe.location, t, e.replace);
                }
            } else
                return this.location.assign(i);
            if (e.trigger)
                this.loadUrl(t);
        },
        _updateHash: function (t, e, i) {
            if (i) {
                var r = t.href.replace(/(javascript:|#).*$/, '');
                t.replace(r + '#' + e);
            } else
                t.hash = '#' + e;
        }
    });
    a.history = new I();
    var j = function (t, e) {
        var i = this;
        var r;
        if (t && h.has(t, 'constructor'))
            r = t.constructor;
        else
            r = function () {
                return i.apply(this, arguments);
            };
        h.extend(r, i, e);
        var s = function () {
            this.constructor = r;
        };
        s.prototype = i.prototype;
        r.prototype = new s();
        if (t)
            h.extend(r.prototype, t);
        r.__super__ = i.prototype;
        return r;
    };
    d.extend = g.extend = S.extend = b.extend = I.extend = j;
    var U = function () {
        throw new Error('A "url" property or function must be specified');
    };
    var R = function (t, e) {
        var i = e.error;
        e.error = function (r) {
            if (i)
                i(t, r, e);
            t.trigger('error', t, r, e);
        };
    };
}.call(this));
define('backbone', [], function () {
    return Backbone;
});

(function () {
    var n = this, t = n._, r = {}, e = Array.prototype, u = Object.prototype, i = Function.prototype, a = e.push, o = e.slice, c = e.concat, l = u.toString, f = u.hasOwnProperty, s = e.forEach, p = e.map, h = e.reduce, v = e.reduceRight, g = e.filter, d = e.every, m = e.some, y = e.indexOf, b = e.lastIndexOf, x = Array.isArray, w = Object.keys, _ = i.bind, j = function (n) {
            return n instanceof j ? n : this instanceof j ? (this._wrapped = n, void 0) : new j(n);
        };
    'undefined' != typeof exports ? ('undefined' != typeof module && (module.exports && (exports = module.exports = j)), exports._ = j) : n._ = j, j.VERSION = '1.5.2';
    var A = j.each = j.forEach = function (n, t, e) {
        if (null != n)
            if (s && n.forEach === s)
                n.forEach(t, e);
            else if (n.length === +n.length)
                for (var u = 0, i = n.length; i > u; u++) {
                    if (t.call(e, n[u], u, n) === r)
                        return;
                }
            else
                for (var a = j.keys(n), u = 0, i = a.length; i > u; u++)
                    if (t.call(e, n[a[u]], a[u], n) === r)
                        return;
    };
    j.map = j.collect = function (n, t, r) {
        var e = [];
        return null == n ? e : p && n.map === p ? n.map(t, r) : (A(n, function (n, u, i) {
            e.push(t.call(r, n, u, i));
        }), e);
    };
    var E = 'Reduce of empty array with no initial value';
    j.reduce = j.foldl = j.inject = function (n, t, r, e) {
        var u = arguments.length > 2;
        if (null == n && (n = []), h && n.reduce === h)
            return e && (t = j.bind(t, e)), u ? n.reduce(t, r) : n.reduce(t);
        if (A(n, function (n, i, a) {
                u ? r = t.call(e, r, n, i, a) : (r = n, u = !0);
            }), !u)
            throw new TypeError(E);
        return r;
    }, j.reduceRight = j.foldr = function (n, t, r, e) {
        var u = arguments.length > 2;
        if (null == n && (n = []), v && n.reduceRight === v)
            return e && (t = j.bind(t, e)), u ? n.reduceRight(t, r) : n.reduceRight(t);
        var i = n.length;
        if (i !== +i) {
            var a = j.keys(n);
            i = a.length;
        }
        if (A(n, function (o, c, l) {
                c = a ? a[--i] : --i, u ? r = t.call(e, r, n[c], c, l) : (r = n[c], u = !0);
            }), !u)
            throw new TypeError(E);
        return r;
    }, j.find = j.detect = function (n, t, r) {
        var e;
        return O(n, function (n, u, i) {
            return t.call(r, n, u, i) ? (e = n, !0) : void 0;
        }), e;
    }, j.filter = j.select = function (n, t, r) {
        var e = [];
        return null == n ? e : g && n.filter === g ? n.filter(t, r) : (A(n, function (n, u, i) {
            t.call(r, n, u, i) && e.push(n);
        }), e);
    }, j.reject = function (n, t, r) {
        return j.filter(n, function (n, e, u) {
            return !t.call(r, n, e, u);
        }, r);
    }, j.every = j.all = function (n, t, e) {
        t || (t = j.identity);
        var u = !0;
        return null == n ? u : d && n.every === d ? n.every(t, e) : (A(n, function (n, i, a) {
            return (u = u && t.call(e, n, i, a)) ? void 0 : r;
        }), !!u);
    };
    var O = j.some = j.any = function (n, t, e) {
        t || (t = j.identity);
        var u = !1;
        return null == n ? u : m && n.some === m ? n.some(t, e) : (A(n, function (n, i, a) {
            return u || (u = t.call(e, n, i, a)) ? r : void 0;
        }), !!u);
    };
    j.contains = j.include = function (n, t) {
        return null == n ? !1 : y && n.indexOf === y ? n.indexOf(t) != -1 : O(n, function (n) {
            return n === t;
        });
    }, j.invoke = function (n, t) {
        var r = o.call(arguments, 2), e = j.isFunction(t);
        return j.map(n, function (n) {
            return (e ? t : n[t]).apply(n, r);
        });
    }, j.pluck = function (n, t) {
        return j.map(n, function (n) {
            return n[t];
        });
    }, j.where = function (n, t, r) {
        return j.isEmpty(t) ? r ? void 0 : [] : j[r ? 'find' : 'filter'](n, function (n) {
            for (var r in t)
                if (t[r] !== n[r])
                    return !1;
            return !0;
        });
    }, j.findWhere = function (n, t) {
        return j.where(n, t, !0);
    }, j.max = function (n, t, r) {
        if (!t && (j.isArray(n) && (n[0] === +n[0] && n.length < 65535)))
            return Math.max.apply(Math, n);
        if (!t && j.isEmpty(n))
            return -1 / 0;
        var e = {
            computed: -1 / 0,
            value: -1 / 0
        };
        return A(n, function (n, u, i) {
            var a = t ? t.call(r, n, u, i) : n;
            a > e.computed && (e = {
                value: n,
                computed: a
            });
        }), e.value;
    }, j.min = function (n, t, r) {
        if (!t && (j.isArray(n) && (n[0] === +n[0] && n.length < 65535)))
            return Math.min.apply(Math, n);
        if (!t && j.isEmpty(n))
            return 1 / 0;
        var e = {
            computed: 1 / 0,
            value: 1 / 0
        };
        return A(n, function (n, u, i) {
            var a = t ? t.call(r, n, u, i) : n;
            a < e.computed && (e = {
                value: n,
                computed: a
            });
        }), e.value;
    }, j.shuffle = function (n) {
        var t, r = 0, e = [];
        return A(n, function (n) {
            t = j.random(r++), e[r - 1] = e[t], e[t] = n;
        }), e;
    }, j.sample = function (n, t, r) {
        return arguments.length < 2 || r ? n[j.random(n.length - 1)] : j.shuffle(n).slice(0, Math.max(0, t));
    };
    var k = function (n) {
        return j.isFunction(n) ? n : function (t) {
            return t[n];
        };
    };
    j.sortBy = function (n, t, r) {
        var e = k(t);
        return j.pluck(j.map(n, function (n, t, u) {
            return {
                value: n,
                index: t,
                criteria: e.call(r, n, t, u)
            };
        }).sort(function (n, t) {
            var r = n.criteria, e = t.criteria;
            if (r !== e) {
                if (r > e || r === void 0)
                    return 1;
                if (e > r || e === void 0)
                    return -1;
            }
            return n.index - t.index;
        }), 'value');
    };
    var F = function (n) {
        return function (t, r, e) {
            var u = {}, i = null == r ? j.identity : k(r);
            return A(t, function (r, a) {
                var o = i.call(e, r, a, t);
                n(u, o, r);
            }), u;
        };
    };
    j.groupBy = F(function (n, t, r) {
        (j.has(n, t) ? n[t] : n[t] = []).push(r);
    }), j.indexBy = F(function (n, t, r) {
        n[t] = r;
    }), j.countBy = F(function (n, t) {
        j.has(n, t) ? n[t]++ : n[t] = 1;
    }), j.sortedIndex = function (n, t, r, e) {
        r = null == r ? j.identity : k(r);
        for (var u = r.call(e, t), i = 0, a = n.length; a > i;) {
            var o = i + a >>> 1;
            r.call(e, n[o]) < u ? i = o + 1 : a = o;
        }
        return i;
    }, j.toArray = function (n) {
        return n ? j.isArray(n) ? o.call(n) : n.length === +n.length ? j.map(n, j.identity) : j.values(n) : [];
    }, j.size = function (n) {
        return null == n ? 0 : n.length === +n.length ? n.length : j.keys(n).length;
    }, j.first = j.head = j.take = function (n, t, r) {
        return null == n ? void 0 : null == t || r ? n[0] : o.call(n, 0, t);
    }, j.initial = function (n, t, r) {
        return o.call(n, 0, n.length - (null == t || r ? 1 : t));
    }, j.last = function (n, t, r) {
        return null == n ? void 0 : null == t || r ? n[n.length - 1] : o.call(n, Math.max(n.length - t, 0));
    }, j.rest = j.tail = j.drop = function (n, t, r) {
        return o.call(n, null == t || r ? 1 : t);
    }, j.compact = function (n) {
        return j.filter(n, j.identity);
    };
    var M = function (n, t, r) {
        return t && j.every(n, j.isArray) ? c.apply(r, n) : (A(n, function (n) {
            j.isArray(n) || j.isArguments(n) ? t ? a.apply(r, n) : M(n, t, r) : r.push(n);
        }), r);
    };
    j.flatten = function (n, t) {
        return M(n, t, []);
    }, j.without = function (n) {
        return j.difference(n, o.call(arguments, 1));
    }, j.uniq = j.unique = function (n, t, r, e) {
        j.isFunction(t) && (e = r, r = t, t = !1);
        var u = r ? j.map(n, r, e) : n, i = [], a = [];
        return A(u, function (r, e) {
            (t ? e && a[a.length - 1] === r : j.contains(a, r)) || (a.push(r), i.push(n[e]));
        }), i;
    }, j.union = function () {
        return j.uniq(j.flatten(arguments, !0));
    }, j.intersection = function (n) {
        var t = o.call(arguments, 1);
        return j.filter(j.uniq(n), function (n) {
            return j.every(t, function (t) {
                return j.indexOf(t, n) >= 0;
            });
        });
    }, j.difference = function (n) {
        var t = c.apply(e, o.call(arguments, 1));
        return j.filter(n, function (n) {
            return !j.contains(t, n);
        });
    }, j.zip = function () {
        for (var n = j.max(j.pluck(arguments, 'length').concat(0)), t = new Array(n), r = 0; n > r; r++)
            t[r] = j.pluck(arguments, '' + r);
        return t;
    }, j.object = function (n, t) {
        if (null == n)
            return {};
        for (var r = {}, e = 0, u = n.length; u > e; e++)
            t ? r[n[e]] = t[e] : r[n[e][0]] = n[e][1];
        return r;
    }, j.indexOf = function (n, t, r) {
        if (null == n)
            return -1;
        var e = 0, u = n.length;
        if (r) {
            if ('number' != typeof r)
                return e = j.sortedIndex(n, t), n[e] === t ? e : -1;
            e = 0 > r ? Math.max(0, u + r) : r;
        }
        if (y && n.indexOf === y)
            return n.indexOf(t, r);
        for (; u > e; e++)
            if (n[e] === t)
                return e;
        return -1;
    }, j.lastIndexOf = function (n, t, r) {
        if (null == n)
            return -1;
        var e = null != r;
        if (b && n.lastIndexOf === b)
            return e ? n.lastIndexOf(t, r) : n.lastIndexOf(t);
        for (var u = e ? r : n.length; u--;)
            if (n[u] === t)
                return u;
        return -1;
    }, j.range = function (n, t, r) {
        arguments.length <= 1 && (t = n || 0, n = 0), r = arguments[2] || 1;
        for (var e = Math.max(Math.ceil((t - n) / r), 0), u = 0, i = new Array(e); e > u;)
            i[u++] = n, n += r;
        return i;
    };
    var R = function () {
    };
    j.bind = function (n, t) {
        var r, e;
        if (_ && n.bind === _)
            return _.apply(n, o.call(arguments, 1));
        if (!j.isFunction(n))
            throw new TypeError();
        return r = o.call(arguments, 2), e = function () {
            if (!(this instanceof e))
                return n.apply(t, r.concat(o.call(arguments)));
            R.prototype = n.prototype;
            var u = new R();
            R.prototype = null;
            var i = n.apply(u, r.concat(o.call(arguments)));
            return Object(i) === i ? i : u;
        };
    }, j.partial = function (n) {
        var t = o.call(arguments, 1);
        return function () {
            return n.apply(this, t.concat(o.call(arguments)));
        };
    }, j.bindAll = function (n) {
        var t = o.call(arguments, 1);
        if (0 === t.length)
            throw new Error('bindAll must be passed function names');
        return A(t, function (t) {
            n[t] = j.bind(n[t], n);
        }), n;
    }, j.memoize = function (n, t) {
        var r = {};
        return t || (t = j.identity), function () {
            var e = t.apply(this, arguments);
            return j.has(r, e) ? r[e] : r[e] = n.apply(this, arguments);
        };
    }, j.delay = function (n, t) {
        var r = o.call(arguments, 2);
        return setTimeout(function () {
            return n.apply(null, r);
        }, t);
    }, j.defer = function (n) {
        return j.delay.apply(j, [
            n,
            1
        ].concat(o.call(arguments, 1)));
    }, j.throttle = function (n, t, r) {
        var e, u, i, a = null, o = 0;
        r || (r = {});
        var c = function () {
            o = r.leading === !1 ? 0 : new Date(), a = null, i = n.apply(e, u);
        };
        return function () {
            var l = new Date();
            o || (r.leading !== !1 || (o = l));
            var f = t - (l - o);
            return e = this, u = arguments, 0 >= f ? (clearTimeout(a), a = null, o = l, i = n.apply(e, u)) : a || (r.trailing === !1 || (a = setTimeout(c, f))), i;
        };
    }, j.debounce = function (n, t, r) {
        var e, u, i, a, o;
        return function () {
            i = this, u = arguments, a = new Date();
            var c = function () {
                    var l = new Date() - a;
                    t > l ? e = setTimeout(c, t - l) : (e = null, r || (o = n.apply(i, u)));
                }, l = r && !e;
            return e || (e = setTimeout(c, t)), l && (o = n.apply(i, u)), o;
        };
    }, j.once = function (n) {
        var t, r = !1;
        return function () {
            return r ? t : (r = !0, t = n.apply(this, arguments), n = null, t);
        };
    }, j.wrap = function (n, t) {
        return function () {
            var r = [n];
            return a.apply(r, arguments), t.apply(this, r);
        };
    }, j.compose = function () {
        var n = arguments;
        return function () {
            for (var t = arguments, r = n.length - 1; r >= 0; r--)
                t = [n[r].apply(this, t)];
            return t[0];
        };
    }, j.after = function (n, t) {
        return function () {
            return --n < 1 ? t.apply(this, arguments) : void 0;
        };
    }, j.keys = w || function (n) {
        if (n !== Object(n))
            throw new TypeError('Invalid object');
        var t = [];
        for (var r in n)
            j.has(n, r) && t.push(r);
        return t;
    }, j.values = function (n) {
        for (var t = j.keys(n), r = t.length, e = new Array(r), u = 0; r > u; u++)
            e[u] = n[t[u]];
        return e;
    }, j.pairs = function (n) {
        for (var t = j.keys(n), r = t.length, e = new Array(r), u = 0; r > u; u++)
            e[u] = [
                t[u],
                n[t[u]]
            ];
        return e;
    }, j.invert = function (n) {
        for (var t = {}, r = j.keys(n), e = 0, u = r.length; u > e; e++)
            t[n[r[e]]] = r[e];
        return t;
    }, j.functions = j.methods = function (n) {
        var t = [];
        for (var r in n)
            j.isFunction(n[r]) && t.push(r);
        return t.sort();
    }, j.extend = function (n) {
        return A(o.call(arguments, 1), function (t) {
            if (t)
                for (var r in t)
                    n[r] = t[r];
        }), n;
    }, j.pick = function (n) {
        var t = {}, r = c.apply(e, o.call(arguments, 1));
        return A(r, function (r) {
            r in n && (t[r] = n[r]);
        }), t;
    }, j.omit = function (n) {
        var t = {}, r = c.apply(e, o.call(arguments, 1));
        for (var u in n)
            j.contains(r, u) || (t[u] = n[u]);
        return t;
    }, j.defaults = function (n) {
        return A(o.call(arguments, 1), function (t) {
            if (t)
                for (var r in t)
                    n[r] === void 0 && (n[r] = t[r]);
        }), n;
    }, j.clone = function (n) {
        return j.isObject(n) ? j.isArray(n) ? n.slice() : j.extend({}, n) : n;
    }, j.tap = function (n, t) {
        return t(n), n;
    };
    var S = function (n, t, r, e) {
        if (n === t)
            return 0 !== n || 1 / n == 1 / t;
        if (null == n || null == t)
            return n === t;
        n instanceof j && (n = n._wrapped), t instanceof j && (t = t._wrapped);
        var u = l.call(n);
        if (u != l.call(t))
            return !1;
        switch (u) {
        case '[object String]':
            return n == String(t);
        case '[object Number]':
            return n != +n ? t != +t : 0 == n ? 1 / n == 1 / t : n == +t;
        case '[object Date]':
        case '[object Boolean]':
            return +n == +t;
        case '[object RegExp]':
            return n.source == t.source && (n.global == t.global && (n.multiline == t.multiline && n.ignoreCase == t.ignoreCase));
        }
        if ('object' != typeof n || 'object' != typeof t)
            return !1;
        for (var i = r.length; i--;)
            if (r[i] == n)
                return e[i] == t;
        var a = n.constructor, o = t.constructor;
        if (a !== o && !(j.isFunction(a) && (a instanceof a && (j.isFunction(o) && o instanceof o))))
            return !1;
        r.push(n), e.push(t);
        var c = 0, f = !0;
        if ('[object Array]' == u) {
            if (c = n.length, f = c == t.length)
                for (; c-- && (f = S(n[c], t[c], r, e)););
        } else {
            for (var s in n)
                if (j.has(n, s) && (c++, !(f = j.has(t, s) && S(n[s], t[s], r, e))))
                    break;
            if (f) {
                for (s in t)
                    if (j.has(t, s) && !c--)
                        break;
                f = !c;
            }
        }
        return r.pop(), e.pop(), f;
    };
    j.isEqual = function (n, t) {
        return S(n, t, [], []);
    }, j.isEmpty = function (n) {
        if (null == n)
            return !0;
        if (j.isArray(n) || j.isString(n))
            return 0 === n.length;
        for (var t in n)
            if (j.has(n, t))
                return !1;
        return !0;
    }, j.isElement = function (n) {
        return !(!n || 1 !== n.nodeType);
    }, j.isArray = x || function (n) {
        return '[object Array]' == l.call(n);
    }, j.isObject = function (n) {
        return n === Object(n);
    }, A([
        'Arguments',
        'Function',
        'String',
        'Number',
        'Date',
        'RegExp'
    ], function (n) {
        j['is' + n] = function (t) {
            return l.call(t) == '[object ' + n + ']';
        };
    }), j.isArguments(arguments) || (j.isArguments = function (n) {
        return !(!n || !j.has(n, 'callee'));
    }), 'function' != typeof /./ && (j.isFunction = function (n) {
        return 'function' == typeof n;
    }), j.isFinite = function (n) {
        return isFinite(n) && !isNaN(parseFloat(n));
    }, j.isNaN = function (n) {
        return j.isNumber(n) && n != +n;
    }, j.isBoolean = function (n) {
        return n === !0 || (n === !1 || '[object Boolean]' == l.call(n));
    }, j.isNull = function (n) {
        return null === n;
    }, j.isUndefined = function (n) {
        return n === void 0;
    }, j.has = function (n, t) {
        return f.call(n, t);
    }, j.noConflict = function () {
        return n._ = t, this;
    }, j.identity = function (n) {
        return n;
    }, j.times = function (n, t, r) {
        for (var e = Array(Math.max(0, n)), u = 0; n > u; u++)
            e[u] = t.call(r, u);
        return e;
    }, j.random = function (n, t) {
        return null == t && (t = n, n = 0), n + Math.floor(Math.random() * (t - n + 1));
    };
    var I = {
        escape: {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#x27;'
        }
    };
    I.unescape = j.invert(I.escape);
    var T = {
        escape: new RegExp('[' + j.keys(I.escape).join('') + ']', 'g'),
        unescape: new RegExp('(' + j.keys(I.unescape).join('|') + ')', 'g')
    };
    j.each([
        'escape',
        'unescape'
    ], function (n) {
        j[n] = function (t) {
            return null == t ? '' : ('' + t).replace(T[n], function (t) {
                return I[n][t];
            });
        };
    }), j.result = function (n, t) {
        if (null == n)
            return void 0;
        var r = n[t];
        return j.isFunction(r) ? r.call(n) : r;
    }, j.mixin = function (n) {
        A(j.functions(n), function (t) {
            var r = j[t] = n[t];
            j.prototype[t] = function () {
                var n = [this._wrapped];
                return a.apply(n, arguments), z.call(this, r.apply(j, n));
            };
        });
    };
    var N = 0;
    j.uniqueId = function (n) {
        var t = ++N + '';
        return n ? n + t : t;
    }, j.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var q = /(.)^/, B = {
            '\'': '\'',
            '\\': '\\',
            '\r': 'r',
            '\n': 'n',
            '\t': 't',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        }, D = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    j.template = function (n, t, r) {
        var e;
        r = j.defaults({}, r, j.templateSettings);
        var u = new RegExp([
                (r.escape || q).source,
                (r.interpolate || q).source,
                (r.evaluate || q).source
            ].join('|') + '|$', 'g'), i = 0, a = '__p+=\'';
        n.replace(u, function (t, r, e, u, o) {
            return a += n.slice(i, o).replace(D, function (n) {
                return '\\' + B[n];
            }), r && (a += '\'+\n((__t=(' + r + '))==null?\'\':_.escape(__t))+\n\''), e && (a += '\'+\n((__t=(' + e + '))==null?\'\':__t)+\n\''), u && (a += '\';\n' + u + '\n__p+=\''), i = o + t.length, t;
        }), a += '\';\n', r.variable || (a = 'with(obj||{}){\n' + a + '}\n'), a = 'var __t,__p=\'\',__j=Array.prototype.join,' + 'print=function(){__p+=__j.call(arguments,\'\');};\n' + a + 'return __p;\n';
        try {
            e = new Function(r.variable || 'obj', '_', a);
        } catch (o) {
            throw o.source = a, o;
        }
        if (t)
            return e(t, j);
        var c = function (n) {
            return e.call(this, n, j);
        };
        return c.source = 'function(' + (r.variable || 'obj') + '){\n' + a + '}', c;
    }, j.chain = function (n) {
        return j(n).chain();
    };
    var z = function (n) {
        return this._chain ? j(n).chain() : n;
    };
    j.mixin(j), A([
        'pop',
        'push',
        'reverse',
        'shift',
        'sort',
        'splice',
        'unshift'
    ], function (n) {
        var t = e[n];
        j.prototype[n] = function () {
            var r = this._wrapped;
            return t.apply(r, arguments), 'shift' != n && 'splice' != n || (0 !== r.length || delete r[0]), z.call(this, r);
        };
    }), A([
        'concat',
        'join',
        'slice'
    ], function (n) {
        var t = e[n];
        j.prototype[n] = function () {
            return z.call(this, t.apply(this._wrapped, arguments));
        };
    }), j.extend(j.prototype, {
        chain: function () {
            return this._chain = !0, this;
        },
        value: function () {
            return this._wrapped;
        }
    });
}.call(this));
define('underscore', [], function () {
    return _;
});

define('coreHelpers', [], function (require) {
    var helpers = {
        lowerCase: function (text) {
            return text.toLowerCase();
        },
        numbers: function (index) {
            return index + 1;
        },
        capitalise: function (text) {
            return text.charAt(0).toUpperCase() + text.slice(1);
        },
        odd: function (index) {
            return (index + 1) % 2 === 0 ? 'even' : 'odd';
        },
        if_value_equals: function (value, text, block) {
            if (value === text) {
                return block.fn(this);
            } else {
                return block.inverse();
            }
        }
    };
    for (var name in helpers) {
        if (helpers.hasOwnProperty(name)) {
            Handlebars.registerHelper(name, helpers[name]);
        }
    }
    return helpers;
});

define('coreJS/adapt', [
    'underscore',
    'backbone',
    'coreHelpers'
], function (require) {
    var _ = require('underscore');
    var Backbone = require('backbone');
    var Helpers = require('coreHelpers');
    var Adapt = {};
    Adapt.location = {};
    Adapt.componentStore = {};
    var mappedIds = {};
    _.extend(Adapt, Backbone.Events);
    Adapt.initialize = _.once(function () {
        Backbone.history.start();
        Adapt.trigger('adapt:initialize');
    });
    Adapt.scrollTo = function (selector, settings) {
        var location = Adapt.location._contentType ? Adapt.location._contentType : Adapt.location.currentLocation;
        Adapt.trigger(location + ':scrollTo', selector);
        var settings = settings || {};
        if (!settings.duration) {
            settings.duration = $.scrollTo.defaults.duration;
        }
        $.scrollTo(selector, settings);
        _.delay(function () {
            Adapt.trigger(location + ':scrolledTo', selector);
        }, settings.duration + 300);
    };
    Adapt.navigateToElement = function (selector, settings) {
        var settings = settings || {};
        var currentModelId = selector.replace(/\./g, '');
        var currentModel = Adapt[Adapt.mapById(currentModelId)].findWhere({ _id: currentModelId });
        var currentPage = currentModel.findAncestor('contentObjects');
        if (currentPage.get('_id') === Adapt.location._currentId) {
            return Adapt.scrollTo(selector, settings);
        }
        Adapt.once('pageView:ready', function () {
            _.defer(function () {
                Adapt.scrollTo(selector, settings);
            });
        });
        Backbone.history.navigate('#/id/' + currentPage.get('_id'), { trigger: true });
    };
    Adapt.register = function (name, object) {
        if (Adapt.componentStore[name])
            throw Error('This component already exists in your project');
        object.template = name;
        Adapt.componentStore[name] = object;
    };
    Adapt.setupMapping = function () {
        mappedIds[Adapt.course.get('_id')] = 'course';
        var collections = [
            'contentObjects',
            'articles',
            'blocks',
            'components'
        ];
        _.each(collections, function (collection) {
            Adapt[collection].each(function (model) {
                mappedIds[model.get('_id')] = collection;
            });
        });
    };
    Adapt.mapById = function (id) {
        return mappedIds[id];
    };
    Adapt.findById = function (id) {
        if (id === Adapt.course.get('_id')) {
            return Adapt.course;
        }
        return Adapt[Adapt.mapById(id)].findWhere({ _id: id });
    };
    return Adapt;
});

define('coreModels/backboneModel', [
    'backbone',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    Backbone.Model = Backbone.Model.extend({
        lockedAttributes: {},
        validate: function (attrs, options) {
            var returnObject = {};
            var lockedAttributes = {};
            var pluginName = options.pluginName;
            _.each(attrs, function (value, key) {
                var hasLockedAttribute = _.has(this.lockedAttributes, key);
                if (hasLockedAttribute) {
                    lockedAttributes[key] = value;
                }
            }, this);
            if (!_.isEmpty(lockedAttributes)) {
                if (!pluginName) {
                    var validateError = 'When setting a locked attribute on the model please specify a pluginName in the options object';
                    var lockedAttributesKeys = _.keys(lockedAttributes);
                    console.log(validateError, lockedAttributesKeys);
                    this.validatedAttributes = _.omit(attrs, lockedAttributesKeys);
                    return validateError;
                }
                _.each(lockedAttributes, function (value, key) {
                    this.lockedAttributes[key][pluginName] = value;
                    var trueAttributes = _.filter(this.lockedAttributes[key], function (value, key) {
                        return value === true;
                    });
                    if (_.size(this.lockedAttributes[key]) === trueAttributes.length) {
                        lockedAttributes[key] = true;
                    } else if (trueAttributes.length === 0) {
                        lockedAttributes[key] = false;
                    } else {
                        lockedAttributes[key] = this.get(key);
                    }
                }, this);
                var returnAttributes = _.extend(attrs, lockedAttributes);
                this.validatedAttributes = returnAttributes;
            } else {
                this.validatedAttributes = attrs;
            }
        },
        isValid: function () {
            return console.log('Sorry, This is not supported in Adapt');
        },
        _validate: function (attrs, options) {
            if (options.reset) {
                return true;
            }
            var error = this.validationError = this.validate(attrs, options) || null;
            if (!error)
                return true;
            this.trigger('invalid', this, error, _.extend(options, { validationError: error }));
            return false;
        },
        set: function (key, val, options) {
            var attr, attrs, unset, changes, silent, changing, prev, current;
            if (key == null)
                return this;
            if (typeof key === 'object') {
                attrs = key;
                options = val;
            } else {
                (attrs = {})[key] = val;
            }
            options || (options = {});
            this._validate(attrs, options);
            if (this.validatedAttributes != null) {
                attrs = this.validatedAttributes;
            }
            unset = options.unset;
            silent = options.silent;
            changes = [];
            changing = this._changing;
            this._changing = true;
            if (!changing) {
                this._previousAttributes = _.clone(this.attributes);
                this.changed = {};
            }
            current = this.attributes, prev = this._previousAttributes;
            if (this.idAttribute in attrs)
                this.id = attrs[this.idAttribute];
            for (attr in attrs) {
                val = attrs[attr];
                if (!_.isEqual(current[attr], val))
                    changes.push(attr);
                if (!_.isEqual(prev[attr], val)) {
                    this.changed[attr] = val;
                } else {
                    delete this.changed[attr];
                }
                unset ? delete current[attr] : current[attr] = val;
            }
            if (!silent) {
                if (changes.length)
                    this._pending = true;
                for (var i = 0, l = changes.length; i < l; i++) {
                    this.trigger('change:' + changes[i], this, current[changes[i]], options);
                }
            }
            this.validatedAttributes = null;
            if (changing)
                return this;
            if (!silent) {
                while (this._pending) {
                    this._pending = false;
                    this.trigger('change', this, options);
                }
            }
            this._pending = false;
            this._changing = false;
            return this;
        }
    });
});

define('coreModels/routerModel', [
    'backbone',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    var RouterModel = Backbone.Model.extend({
        defaults: { _canNavigate: true },
        lockedAttributes: { _canNavigate: {} }
    });
    return RouterModel;
});

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('handlebars', [], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.Handlebars = root.Handlebars || factory();
    }
}(this, function () {
    var __module3__ = function () {
        'use strict';
        var __exports__;
        function SafeString(string) {
            this.string = string;
        }
        SafeString.prototype.toString = function () {
            return '' + this.string;
        };
        __exports__ = SafeString;
        return __exports__;
    }();
    var __module2__ = function (__dependency1__) {
        'use strict';
        var __exports__ = {};
        var SafeString = __dependency1__;
        var escape = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#x27;',
            '`': '&#x60;'
        };
        var badChars = /[&<>"'`]/g;
        var possible = /[&<>"'`]/;
        function escapeChar(chr) {
            return escape[chr];
        }
        function extend(obj) {
            for (var i = 1; i < arguments.length; i++) {
                for (var key in arguments[i]) {
                    if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
                        obj[key] = arguments[i][key];
                    }
                }
            }
            return obj;
        }
        __exports__.extend = extend;
        var toString = Object.prototype.toString;
        __exports__.toString = toString;
        var isFunction = function (value) {
            return typeof value === 'function';
        };
        if (isFunction(/x/)) {
            isFunction = function (value) {
                return typeof value === 'function' && toString.call(value) === '[object Function]';
            };
        }
        var isFunction;
        __exports__.isFunction = isFunction;
        var isArray = Array.isArray || function (value) {
            return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
        };
        __exports__.isArray = isArray;
        function escapeExpression(string) {
            if (string instanceof SafeString) {
                return string.toString();
            } else if (string == null) {
                return '';
            } else if (!string) {
                return string + '';
            }
            string = '' + string;
            if (!possible.test(string)) {
                return string;
            }
            return string.replace(badChars, escapeChar);
        }
        __exports__.escapeExpression = escapeExpression;
        function isEmpty(value) {
            if (!value && value !== 0) {
                return true;
            } else if (isArray(value) && value.length === 0) {
                return true;
            } else {
                return false;
            }
        }
        __exports__.isEmpty = isEmpty;
        function appendContextPath(contextPath, id) {
            return (contextPath ? contextPath + '.' : '') + id;
        }
        __exports__.appendContextPath = appendContextPath;
        return __exports__;
    }(__module3__);
    var __module4__ = function () {
        'use strict';
        var __exports__;
        var errorProps = [
            'description',
            'fileName',
            'lineNumber',
            'message',
            'name',
            'number',
            'stack'
        ];
        function Exception(message, node) {
            var line;
            if (node && node.firstLine) {
                line = node.firstLine;
                message += ' - ' + line + ':' + node.firstColumn;
            }
            var tmp = Error.prototype.constructor.call(this, message);
            for (var idx = 0; idx < errorProps.length; idx++) {
                this[errorProps[idx]] = tmp[errorProps[idx]];
            }
            if (line) {
                this.lineNumber = line;
                this.column = node.firstColumn;
            }
        }
        Exception.prototype = new Error();
        __exports__ = Exception;
        return __exports__;
    }();
    var __module1__ = function (__dependency1__, __dependency2__) {
        'use strict';
        var __exports__ = {};
        var Utils = __dependency1__;
        var Exception = __dependency2__;
        var VERSION = '2.0.0';
        __exports__.VERSION = VERSION;
        var COMPILER_REVISION = 6;
        __exports__.COMPILER_REVISION = COMPILER_REVISION;
        var REVISION_CHANGES = {
            1: '<= 1.0.rc.2',
            2: '== 1.0.0-rc.3',
            3: '== 1.0.0-rc.4',
            4: '== 1.x.x',
            5: '== 2.0.0-alpha.x',
            6: '>= 2.0.0-beta.1'
        };
        __exports__.REVISION_CHANGES = REVISION_CHANGES;
        var isArray = Utils.isArray, isFunction = Utils.isFunction, toString = Utils.toString, objectType = '[object Object]';
        function HandlebarsEnvironment(helpers, partials) {
            this.helpers = helpers || {};
            this.partials = partials || {};
            registerDefaultHelpers(this);
        }
        __exports__.HandlebarsEnvironment = HandlebarsEnvironment;
        HandlebarsEnvironment.prototype = {
            constructor: HandlebarsEnvironment,
            logger: logger,
            log: log,
            registerHelper: function (name, fn) {
                if (toString.call(name) === objectType) {
                    if (fn) {
                        throw new Exception('Arg not supported with multiple helpers');
                    }
                    Utils.extend(this.helpers, name);
                } else {
                    this.helpers[name] = fn;
                }
            },
            unregisterHelper: function (name) {
                delete this.helpers[name];
            },
            registerPartial: function (name, partial) {
                if (toString.call(name) === objectType) {
                    Utils.extend(this.partials, name);
                } else {
                    this.partials[name] = partial;
                }
            },
            unregisterPartial: function (name) {
                delete this.partials[name];
            }
        };
        function registerDefaultHelpers(instance) {
            instance.registerHelper('helperMissing', function () {
                if (arguments.length === 1) {
                    return undefined;
                } else {
                    throw new Exception('Missing helper: \'' + arguments[arguments.length - 1].name + '\'');
                }
            });
            instance.registerHelper('blockHelperMissing', function (context, options) {
                var inverse = options.inverse, fn = options.fn;
                if (context === true) {
                    return fn(this);
                } else if (context === false || context == null) {
                    return inverse(this);
                } else if (isArray(context)) {
                    if (context.length > 0) {
                        if (options.ids) {
                            options.ids = [options.name];
                        }
                        return instance.helpers.each(context, options);
                    } else {
                        return inverse(this);
                    }
                } else {
                    if (options.data && options.ids) {
                        var data = createFrame(options.data);
                        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
                        options = { data: data };
                    }
                    return fn(context, options);
                }
            });
            instance.registerHelper('each', function (context, options) {
                if (!options) {
                    throw new Exception('Must pass iterator to #each');
                }
                var fn = options.fn, inverse = options.inverse;
                var i = 0, ret = '', data;
                var contextPath;
                if (options.data && options.ids) {
                    contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
                }
                if (isFunction(context)) {
                    context = context.call(this);
                }
                if (options.data) {
                    data = createFrame(options.data);
                }
                if (context && typeof context === 'object') {
                    if (isArray(context)) {
                        for (var j = context.length; i < j; i++) {
                            if (data) {
                                data.index = i;
                                data.first = i === 0;
                                data.last = i === context.length - 1;
                                if (contextPath) {
                                    data.contextPath = contextPath + i;
                                }
                            }
                            ret = ret + fn(context[i], { data: data });
                        }
                    } else {
                        for (var key in context) {
                            if (context.hasOwnProperty(key)) {
                                if (data) {
                                    data.key = key;
                                    data.index = i;
                                    data.first = i === 0;
                                    if (contextPath) {
                                        data.contextPath = contextPath + key;
                                    }
                                }
                                ret = ret + fn(context[key], { data: data });
                                i++;
                            }
                        }
                    }
                }
                if (i === 0) {
                    ret = inverse(this);
                }
                return ret;
            });
            instance.registerHelper('if', function (conditional, options) {
                if (isFunction(conditional)) {
                    conditional = conditional.call(this);
                }
                if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
                    return options.inverse(this);
                } else {
                    return options.fn(this);
                }
            });
            instance.registerHelper('unless', function (conditional, options) {
                return instance.helpers['if'].call(this, conditional, {
                    fn: options.inverse,
                    inverse: options.fn,
                    hash: options.hash
                });
            });
            instance.registerHelper('with', function (context, options) {
                if (isFunction(context)) {
                    context = context.call(this);
                }
                var fn = options.fn;
                if (!Utils.isEmpty(context)) {
                    if (options.data && options.ids) {
                        var data = createFrame(options.data);
                        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
                        options = { data: data };
                    }
                    return fn(context, options);
                } else {
                    return options.inverse(this);
                }
            });
            instance.registerHelper('log', function (message, options) {
                var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
                instance.log(level, message);
            });
            instance.registerHelper('lookup', function (obj, field) {
                return obj && obj[field];
            });
        }
        var logger = {
            methodMap: {
                0: 'debug',
                1: 'info',
                2: 'warn',
                3: 'error'
            },
            DEBUG: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3,
            level: 3,
            log: function (level, message) {
                if (logger.level <= level) {
                    var method = logger.methodMap[level];
                    if (typeof console !== 'undefined' && console[method]) {
                        console[method].call(console, message);
                    }
                }
            }
        };
        __exports__.logger = logger;
        var log = logger.log;
        __exports__.log = log;
        var createFrame = function (object) {
            var frame = Utils.extend({}, object);
            frame._parent = object;
            return frame;
        };
        __exports__.createFrame = createFrame;
        return __exports__;
    }(__module2__, __module4__);
    var __module5__ = function (__dependency1__, __dependency2__, __dependency3__) {
        'use strict';
        var __exports__ = {};
        var Utils = __dependency1__;
        var Exception = __dependency2__;
        var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
        var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
        var createFrame = __dependency3__.createFrame;
        function checkRevision(compilerInfo) {
            var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = COMPILER_REVISION;
            if (compilerRevision !== currentRevision) {
                if (compilerRevision < currentRevision) {
                    var runtimeVersions = REVISION_CHANGES[currentRevision], compilerVersions = REVISION_CHANGES[compilerRevision];
                    throw new Exception('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
                } else {
                    throw new Exception('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
                }
            }
        }
        __exports__.checkRevision = checkRevision;
        function template(templateSpec, env) {
            if (!env) {
                throw new Exception('No environment passed to template');
            }
            if (!templateSpec || !templateSpec.main) {
                throw new Exception('Unknown template object: ' + typeof templateSpec);
            }
            env.VM.checkRevision(templateSpec.compiler);
            var invokePartialWrapper = function (partial, indent, name, context, hash, helpers, partials, data, depths) {
                if (hash) {
                    context = Utils.extend({}, context, hash);
                }
                var result = env.VM.invokePartial.call(this, partial, name, context, helpers, partials, data, depths);
                if (result == null && env.compile) {
                    var options = {
                        helpers: helpers,
                        partials: partials,
                        data: data,
                        depths: depths
                    };
                    partials[name] = env.compile(partial, {
                        data: data !== undefined,
                        compat: templateSpec.compat
                    }, env);
                    result = partials[name](context, options);
                }
                if (result != null) {
                    if (indent) {
                        var lines = result.split('\n');
                        for (var i = 0, l = lines.length; i < l; i++) {
                            if (!lines[i] && i + 1 === l) {
                                break;
                            }
                            lines[i] = indent + lines[i];
                        }
                        result = lines.join('\n');
                    }
                    return result;
                } else {
                    throw new Exception('The partial ' + name + ' could not be compiled when running in runtime-only mode');
                }
            };
            var container = {
                lookup: function (depths, name) {
                    var len = depths.length;
                    for (var i = 0; i < len; i++) {
                        if (depths[i] && depths[i][name] != null) {
                            return depths[i][name];
                        }
                    }
                },
                lambda: function (current, context) {
                    return typeof current === 'function' ? current.call(context) : current;
                },
                escapeExpression: Utils.escapeExpression,
                invokePartial: invokePartialWrapper,
                fn: function (i) {
                    return templateSpec[i];
                },
                programs: [],
                program: function (i, data, depths) {
                    var programWrapper = this.programs[i], fn = this.fn(i);
                    if (data || depths) {
                        programWrapper = program(this, i, fn, data, depths);
                    } else if (!programWrapper) {
                        programWrapper = this.programs[i] = program(this, i, fn);
                    }
                    return programWrapper;
                },
                data: function (data, depth) {
                    while (data && depth--) {
                        data = data._parent;
                    }
                    return data;
                },
                merge: function (param, common) {
                    var ret = param || common;
                    if (param && common && param !== common) {
                        ret = Utils.extend({}, common, param);
                    }
                    return ret;
                },
                noop: env.VM.noop,
                compilerInfo: templateSpec.compiler
            };
            var ret = function (context, options) {
                options = options || {};
                var data = options.data;
                ret._setup(options);
                if (!options.partial && templateSpec.useData) {
                    data = initData(context, data);
                }
                var depths;
                if (templateSpec.useDepths) {
                    depths = options.depths ? [context].concat(options.depths) : [context];
                }
                return templateSpec.main.call(container, context, container.helpers, container.partials, data, depths);
            };
            ret.isTop = true;
            ret._setup = function (options) {
                if (!options.partial) {
                    container.helpers = container.merge(options.helpers, env.helpers);
                    if (templateSpec.usePartial) {
                        container.partials = container.merge(options.partials, env.partials);
                    }
                } else {
                    container.helpers = options.helpers;
                    container.partials = options.partials;
                }
            };
            ret._child = function (i, data, depths) {
                if (templateSpec.useDepths && !depths) {
                    throw new Exception('must pass parent depths');
                }
                return program(container, i, templateSpec[i], data, depths);
            };
            return ret;
        }
        __exports__.template = template;
        function program(container, i, fn, data, depths) {
            var prog = function (context, options) {
                options = options || {};
                return fn.call(container, context, container.helpers, container.partials, options.data || data, depths && [context].concat(depths));
            };
            prog.program = i;
            prog.depth = depths ? depths.length : 0;
            return prog;
        }
        __exports__.program = program;
        function invokePartial(partial, name, context, helpers, partials, data, depths) {
            var options = {
                partial: true,
                helpers: helpers,
                partials: partials,
                data: data,
                depths: depths
            };
            if (partial === undefined) {
                throw new Exception('The partial ' + name + ' could not be found');
            } else if (partial instanceof Function) {
                return partial(context, options);
            }
        }
        __exports__.invokePartial = invokePartial;
        function noop() {
            return '';
        }
        __exports__.noop = noop;
        function initData(context, data) {
            if (!data || !('root' in data)) {
                data = data ? createFrame(data) : {};
                data.root = context;
            }
            return data;
        }
        return __exports__;
    }(__module2__, __module4__, __module1__);
    var __module0__ = function (__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
        'use strict';
        var __exports__;
        var base = __dependency1__;
        var SafeString = __dependency2__;
        var Exception = __dependency3__;
        var Utils = __dependency4__;
        var runtime = __dependency5__;
        var create = function () {
            var hb = new base.HandlebarsEnvironment();
            Utils.extend(hb, base);
            hb.SafeString = SafeString;
            hb.Exception = Exception;
            hb.Utils = Utils;
            hb.escapeExpression = Utils.escapeExpression;
            hb.VM = runtime;
            hb.template = function (spec) {
                return runtime.template(spec, hb);
            };
            return hb;
        };
        var Handlebars = create();
        Handlebars.create = create;
        Handlebars['default'] = Handlebars;
        __exports__ = Handlebars;
        return __exports__;
    }(__module1__, __module3__, __module4__, __module2__, __module5__);
    return __module0__;
}));

define('coreViews/adaptView', [
    'backbone',
    'handlebars',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Handlebars = require('handlebars');
    var Adapt = require('coreJS/adapt');
    var AdaptView = Backbone.View.extend({
        initialize: function () {
            this.listenTo(Adapt, 'remove', this.remove);
            this.listenTo(this.model, 'change:_isVisible', this.toggleVisibility);
            this.model.set('_accessibility', Adapt.course.get('_accessibility'));
            this.preRender();
            this.render();
        },
        preRender: function () {
        },
        postRender: function () {
            this.addChildren();
        },
        render: function () {
            Adapt.trigger(this.constructor.type + 'View:preRender', this);
            var data = this.model.toJSON();
            var template = Handlebars.templates[this.constructor.template];
            this.$el.html(template(data));
            _.defer(_.bind(function () {
                this.postRender();
                Adapt.trigger(this.constructor.type + 'View:postRender', this);
            }, this));
            return this;
        },
        addChildren: function () {
            var nthChild = 0;
            this.model.getChildren().each(function (model) {
                if (model.get('_isAvailable')) {
                    nthChild++;
                    var ChildView = this.constructor.childView || Adapt.componentStore[model.get('_component')];
                    var $parentContainer = this.$(this.constructor.childContainer);
                    $parentContainer.append(new ChildView({
                        model: model,
                        $parent: $parentContainer,
                        nthChild: nthChild
                    }).$el);
                }
            }, this);
        },
        setReadyStatus: function () {
            this.model.set('_isReady', true);
        },
        setCompletionStatus: function () {
            if (this.model.get('_isVisible')) {
                this.model.set('_isComplete', true);
            }
        },
        remove: function () {
            this.model.setOnChildren('_isReady', false);
            this.model.set('_isReady', false);
            this.$el.remove();
            this.stopListening();
            return this;
        },
        setVisibility: function () {
            var visible = 'visibility-hidden';
            if (this.model.get('_isVisible')) {
                visible = '';
            }
            return visible;
        },
        toggleVisibility: function () {
            if (this.model.get('_isVisible')) {
                return this.$el.removeClass('visibility-hidden');
            }
            this.$el.addClass('visibility-hidden');
        }
    });
    return AdaptView;
});

define('coreViews/blockView', ['coreViews/adaptView'], function (require) {
    var AdaptView = require('coreViews/adaptView');
    var BlockView = AdaptView.extend({
        className: function () {
            return 'block ' + this.model.get('_id') + ' ' + this.model.get('_classes') + ' ' + this.setVisibility() + ' nth-child-' + this.options.nthChild;
            ;
        }
    }, {
        childContainer: '.component-container',
        type: 'block',
        template: 'block'
    });
    return BlockView;
});

define('coreViews/articleView', [
    'coreViews/adaptView',
    'coreViews/blockView'
], function (require) {
    var AdaptView = require('coreViews/adaptView');
    var BlockView = require('coreViews/blockView');
    var ArticleView = AdaptView.extend({
        className: function () {
            return 'article ' + this.model.get('_id') + ' ' + this.model.get('_classes') + ' ' + this.setVisibility() + ' nth-child-' + this.options.nthChild;
        }
    }, {
        childContainer: '.block-container',
        childView: BlockView,
        type: 'article',
        template: 'article'
    });
    return ArticleView;
});

define('coreViews/pageView', [
    'coreViews/adaptView',
    'coreViews/articleView',
    'coreJS/adapt'
], function (require) {
    var AdaptView = require('coreViews/adaptView');
    var ArticleView = require('coreViews/articleView');
    var Adapt = require('coreJS/adapt');
    var PageView = AdaptView.extend({
        className: function () {
            return 'page ' + this.model.get('_id') + ' ' + this.model.get('_classes') + ' ' + this.setVisibility();
        },
        preRender: function () {
            this.$el.css('opacity', 0);
            this.listenTo(this.model, 'change:_isReady', this.isReady);
        },
        isReady: function () {
            if (this.model.get('_isReady')) {
                _.defer(_.bind(function () {
                    $('.loading').hide();
                    $(window).scrollTop(0);
                    Adapt.trigger('pageView:ready', this);
                    this.$el.velocity({ 'opacity': 1 }, 'fast');
                    $(window).scroll();
                }, this));
            }
        }
    }, {
        childContainer: '.article-container',
        childView: ArticleView,
        type: 'page',
        template: 'page'
    });
    return PageView;
});

define('coreJS/router', [
    'backbone',
    'coreJS/adapt',
    'coreModels/routerModel',
    'coreViews/pageView'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    var RouterModel = require('coreModels/routerModel');
    var PageView = require('coreViews/pageView');
    Adapt.router = new RouterModel(null, { reset: true });
    var Router = Backbone.Router.extend({
        initialize: function () {
            this.showLoading();
            this.$wrapper = $('#wrapper');
            Adapt.once('app:dataReady', function () {
                document.title = Adapt.course.get('title');
            });
            this.listenTo(Adapt, 'navigation:backButton', this.navigateToPreviousRoute);
        },
        routes: {
            '': 'handleCourse',
            'id/:id': 'handleId',
            ':pluginName(/*location)(/*action)': 'handlePluginRouter'
        },
        handlePluginRouter: function (pluginName, location, action) {
            var pluginLocation = pluginName;
            if (location) {
                pluginLocation = pluginLocation + '-' + location;
                if (action) {
                    pluginLocation = pluginLocation + '-' + action;
                }
            }
            this.updateLocation(pluginLocation);
            Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);
        },
        handleCourse: function () {
            this.removeViews();
            this.showLoading();
            Adapt.course.set('_isReady', false);
            this.setContentObjectToVisited(Adapt.course);
            this.updateLocation('course');
            Adapt.trigger('router:menu', Adapt.course);
        },
        handleId: function (id) {
            this.removeViews();
            this.showLoading();
            var currentModel = Adapt.contentObjects.findWhere({ _id: id });
            this.setContentObjectToVisited(currentModel);
            if (currentModel.get('_type') == 'page') {
                var location = 'page-' + id;
                this.updateLocation(location, 'page', id);
                Adapt.trigger('router:page', currentModel);
                this.$wrapper.append(new PageView({ model: currentModel }).$el);
            } else {
                var location = 'menu-' + id;
                this.updateLocation(location, 'menu', id);
                Adapt.trigger('router:menu', currentModel);
            }
        },
        removeViews: function () {
            Adapt.trigger('remove');
        },
        showLoading: function () {
            $('.loading').show();
        },
        navigateToPreviousRoute: function () {
            if (Adapt.router.get('_canNavigate')) {
                if (!Adapt.location._currentId) {
                    return Backbone.history.history.back();
                }
                if (Adapt.location._previousContentType === 'page' && Adapt.location._contentType === 'menu') {
                    return this.navigateToParent();
                }
                if (Adapt.location._previousContentType === 'page') {
                    return Backbone.history.history.back();
                }
                if (Adapt.location._currentLocation === 'course') {
                    return;
                }
                this.navigateToParent();
            }
        },
        navigateToParent: function () {
            var currentModel = Adapt.contentObjects.findWhere({ _id: Adapt.location._currentId });
            var parent = currentModel.getParent();
            if (parent.get('_id') === Adapt.course.get('_id')) {
                return this.navigate('#', { trigger: true });
            }
            this.navigate('#/id/' + parent.get('_id'), { trigger: true });
        },
        setContentObjectToVisited: function (model) {
            model.set('_isVisited', true);
        },
        updateLocation: function (currentLocation, type, id) {
            Adapt.location._previousId = Adapt.location._currentId;
            Adapt.location._previousContentType = Adapt.location._contentType;
            if (currentLocation === 'course') {
                Adapt.location._currentId = 'course';
                Adapt.location._contentType = 'menu';
                Adapt.location._lastVisitedMenu = currentLocation;
            } else if (!type) {
                Adapt.location._currentId = null;
                Adapt.location._contentType = null;
            } else if (arguments.length === 3) {
                Adapt.location._currentId = id;
                Adapt.location._contentType = type;
                if (type === 'menu') {
                    Adapt.location._lastVisitedType = 'menu';
                    Adapt.location._lastVisitedMenu = id;
                } else if (type === 'page') {
                    Adapt.location._lastVisitedType = 'page';
                    Adapt.location._lastVisitedPage = id;
                }
            }
            Adapt.location._currentLocation = currentLocation;
            var classes = Adapt.location._currentId ? 'location-' + Adapt.location._contentType + ' location-id-' + Adapt.location._currentId : 'location-' + Adapt.location._currentLocation;
            this.$wrapper.removeClass().addClass(classes).attr('data-location', Adapt.location._currentLocation);
            Adapt.trigger('router:location', Adapt.location);
        }
    });
    return new Router({ model: new Backbone.Model() });
});

define('coreViews/drawerView', [
    'backbone',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    var DrawerView = Backbone.View.extend({
        className: 'drawer display-none',
        initialize: function () {
            this._isVisible = false;
            this.listenTo(Adapt, 'navigation:toggleDrawer', this.toggleDrawer);
            this.listenTo(Adapt, 'drawer:triggerCustomView', this.openCustomView);
            this.listenToOnce(Adapt, 'adapt:initialize', this.checkIfDrawerIsAvailable);
            this.listenTo(Adapt, 'drawer:closeDrawer', this.onCloseDrawer);
            this.listenTo(Adapt, 'remove', this.onCloseDrawer);
            this.render();
            this.drawerDuration = Adapt.config.get('_drawer')._duration;
            this.drawerDuration = this.drawerDuration ? this.drawerDuration : 400;
            this.$wrapper = $('#wrapper');
        },
        events: {
            'click .drawer-back': 'onBackButtonClicked',
            'click .drawer-close': 'onCloseDrawer'
        },
        render: function () {
            var template = Handlebars.templates['drawer'];
            $(this.el).html(template(Adapt.course.get('_accessibility')._ariaLabels)).appendTo('body');
            var shadowTemplate = Handlebars.templates['shadow'];
            $(shadowTemplate()).appendTo('body');
            _.defer(_.bind(function () {
                this.postRender();
            }, this));
            return this;
        },
        postRender: function () {
            this.$('a, button, input, select, textarea').attr('tabindex', -1);
        },
        openCustomView: function (view, hasBackButton) {
            this._hasBackButton = hasBackButton;
            this._isCustomViewVisible = true;
            Adapt.trigger('drawer:empty');
            this.showDrawer();
            this.$('.drawer-holder').html(view);
        },
        checkIfDrawerIsAvailable: function () {
            if (this.collection.length == 0) {
                $('.navigation-drawer-toggle-button').addClass('display-none');
            }
        },
        onBackButtonClicked: function (event) {
            event.preventDefault();
            this.showDrawer(true);
        },
        onCloseDrawer: function (event) {
            if (event) {
                event.preventDefault();
            }
            this._isVisible = false;
            this.hideDrawer();
        },
        toggleDrawer: function () {
            if (this._isVisible && this._isCustomViewVisible === false) {
                this._isVisible = false;
                this.hideDrawer();
            } else {
                this._isVisible = true;
                this.showDrawer(true);
            }
        },
        showDrawer: function (emptyDrawer) {
            this.$el.removeClass('display-none');
            Adapt.trigger('popup:opened');
            var drawerWidth = this.$el.width();
            this.$('a, button, input, select, textarea').attr('tabindex', 0);
            if (emptyDrawer) {
                this.$('.drawer-back').addClass('display-none');
                this._isCustomViewVisible = false;
                this.emptyDrawer();
                this.renderItems();
                Adapt.trigger('drawer:openedItemView');
                this.$('.drawer-close').focus();
            } else {
                if (this._hasBackButton) {
                    this.$('.drawer-back').removeClass('display-none');
                    this.$('.drawer-back').focus();
                } else {
                    this.$('.drawer-back').addClass('display-none');
                    this.$('.drawer-close').focus();
                }
                Adapt.trigger('drawer:openedCustomView');
            }
            _.defer(_.bind(function () {
                var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;
                var easing = showEasingAnimation ? showEasingAnimation : 'easeOutQuart';
                this.$el.velocity({ 'right': 0 }, this.drawerDuration, easing);
                $('#shadow').removeClass('display-none');
                this.addShadowEvent();
                Adapt.trigger('drawer:opened');
            }, this));
        },
        emptyDrawer: function () {
            this.$('.drawer-holder').empty();
        },
        renderItems: function () {
            Adapt.trigger('drawer:empty');
            this.emptyDrawer();
            this.collection.each(function (item) {
                new DrawerItemView({ model: item });
            });
        },
        hideDrawer: function () {
            Adapt.trigger('popup:closed');
            var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;
            var easing = showEasingAnimation ? showEasingAnimation : 'easeOutQuart';
            var duration = Adapt.config.get('_drawer')._duration;
            duration = duration ? duration : 400;
            this.$el.velocity({ 'right': -this.$el.width() }, this.drawerDuration, easing, _.bind(function () {
                this.$el.addClass('display-none');
            }, this));
            $('#shadow').addClass('display-none');
            this._isCustomViewVisible = false;
            this.removeShadowEvent();
            Adapt.trigger('drawer:closed');
        },
        addShadowEvent: function () {
            $('#shadow').one('click touchstart', _.bind(function () {
                this.onCloseDrawer();
            }, this));
        },
        removeShadowEvent: function () {
            $('#shadow').off('click touchstart');
        }
    });
    var DrawerItemView = Backbone.View.extend({
        className: 'drawer-item',
        initialize: function () {
            this.listenTo(Adapt, 'drawer:empty', this.remove);
            this.render();
        },
        events: { 'click .drawer-item-open': 'onDrawerItemClicked' },
        render: function () {
            var data = this.model.toJSON();
            var template = Handlebars.templates['drawerItem'];
            $(this.el).html(template(data)).appendTo('.drawer-holder');
            return this;
        },
        onDrawerItemClicked: function (event) {
            event.preventDefault();
            var eventCallback = this.model.get('eventCallback');
            Adapt.trigger(eventCallback);
        }
    });
    return DrawerView;
});

define('coreJS/drawer', [
    'coreViews/drawerView',
    'coreJS/adapt'
], function (require) {
    var DrawerView = require('coreViews/drawerView');
    var DrawerCollection = new Backbone.Collection();
    var Adapt = require('coreJS/adapt');
    var Drawer = {};
    Drawer.addItem = function (drawerObject, eventCallback) {
        drawerObject.eventCallback = eventCallback;
        DrawerCollection.add(drawerObject);
    };
    Drawer.triggerCustomView = function (view, hasBackButton) {
        if (hasBackButton !== false) {
            hasBackButton = true;
        }
        Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);
    };
    var init = function () {
        new DrawerView({ collection: DrawerCollection });
    };
    Adapt.once('app:dataReady', function () {
        init();
    });
    Adapt.drawer = Drawer;
});

!function (e, t) {
    typeof module != 'undefined' && module.exports ? module.exports.browser = t() : typeof define == 'function' ? define('coreJS/libraries/bowser', [], t) : this[e] = t();
}('bowser', function () {
    function t(t) {
        function n(e) {
            var n = t.match(e);
            return n && n.length > 1 && n[1] || '';
        }
        var r = n(/(ipod|iphone|ipad)/i).toLowerCase(), i = /like android/i.test(t), s = !i && /android/i.test(t), o = n(/version\/(\d+(\.\d+)?)/i), u = /tablet/i.test(t), a = !u && /[^-]mobi/i.test(t), f;
        /opera|opr/i.test(t) ? f = {
            name: 'Opera',
            opera: e,
            version: o || n(/(?:opera|opr)[\s\/](\d+(\.\d+)?)/i)
        } : /windows phone/i.test(t) ? f = {
            name: 'Windows Phone',
            windowsphone: e,
            msie: e,
            version: n(/iemobile\/(\d+(\.\d+)?)/i)
        } : /msie|trident/i.test(t) ? f = {
            name: 'Internet Explorer',
            msie: e,
            version: n(/(?:msie |rv:)(\d+(\.\d+)?)/i)
        } : /chrome|crios|crmo/i.test(t) ? f = {
            name: 'Chrome',
            chrome: e,
            version: n(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
        } : r ? (f = { name: r == 'iphone' ? 'iPhone' : r == 'ipad' ? 'iPad' : 'iPod' }, o && (f.version = o)) : /sailfish/i.test(t) ? f = {
            name: 'Sailfish',
            sailfish: e,
            version: n(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
        } : /seamonkey\//i.test(t) ? f = {
            name: 'SeaMonkey',
            seamonkey: e,
            version: n(/seamonkey\/(\d+(\.\d+)?)/i)
        } : /firefox|iceweasel/i.test(t) ? (f = {
            name: 'Firefox',
            firefox: e,
            version: n(/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i)
        }, /\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(t) && (f.firefoxos = e)) : /silk/i.test(t) ? f = {
            name: 'Amazon Silk',
            silk: e,
            version: n(/silk\/(\d+(\.\d+)?)/i)
        } : s ? f = {
            name: 'Android',
            version: o
        } : /phantom/i.test(t) ? f = {
            name: 'PhantomJS',
            phantom: e,
            version: n(/phantomjs\/(\d+(\.\d+)?)/i)
        } : /blackberry|\bbb\d+/i.test(t) || /rim\stablet/i.test(t) ? f = {
            name: 'BlackBerry',
            blackberry: e,
            version: o || n(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
        } : /(web|hpw)os/i.test(t) ? (f = {
            name: 'WebOS',
            webos: e,
            version: o || n(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
        }, /touchpad\//i.test(t) && (f.touchpad = e)) : /bada/i.test(t) ? f = {
            name: 'Bada',
            bada: e,
            version: n(/dolfin\/(\d+(\.\d+)?)/i)
        } : /tizen/i.test(t) ? f = {
            name: 'Tizen',
            tizen: e,
            version: n(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || o
        } : /safari/i.test(t) ? f = {
            name: 'Safari',
            safari: e,
            version: o
        } : f = {}, /(apple)?webkit/i.test(t) ? (f.name = f.name || 'Webkit', f.webkit = e, !f.version && o && (f.version = o)) : !f.opera && /gecko\//i.test(t) && (f.name = f.name || 'Gecko', f.gecko = e, f.version = f.version || n(/gecko\/(\d+(\.\d+)?)/i)), s || f.silk ? f.android = e : r && (f[r] = e, f.ios = e);
        var l = '';
        r ? (l = n(/os (\d+([_\s]\d+)*) like mac os x/i), l = l.replace(/[_\s]/g, '.')) : s ? l = n(/android[ \/-](\d+(\.\d+)*)/i) : f.windowsphone ? l = n(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i) : f.webos ? l = n(/(?:web|hpw)os\/(\d+(\.\d+)*)/i) : f.blackberry ? l = n(/rim\stablet\sos\s(\d+(\.\d+)*)/i) : f.bada ? l = n(/bada\/(\d+(\.\d+)*)/i) : f.tizen && (l = n(/tizen[\/\s](\d+(\.\d+)*)/i)), l && (f.osversion = l);
        var c = l.split('.')[0];
        if (u || r == 'ipad' || s && (c == 3 || c == 4 && !a) || f.silk)
            f.tablet = e;
        else if (a || r == 'iphone' || r == 'ipod' || s || f.blackberry || f.webos || f.bada)
            f.mobile = e;
        return f.msie && f.version >= 10 || f.chrome && f.version >= 20 || f.firefox && f.version >= 20 || f.safari && f.version >= 6 || f.opera && f.version >= 10 || f.ios && f.osversion && f.osversion.split('.')[0] >= 6 ? f.a = e : f.msie && f.version < 10 || f.chrome && f.version < 20 || f.firefox && f.version < 20 || f.safari && f.version < 6 || f.opera && f.version < 10 || f.ios && f.osversion && f.osversion.split('.')[0] < 6 ? f.c = e : f.x = e, f;
    }
    var e = !0, n = t(typeof navigator != 'undefined' ? navigator.userAgent : '');
    return n._detect = t, n;
});

define('coreJS/device', [
    'coreJS/adapt',
    'coreJS/libraries/bowser'
], function (require) {
    var Adapt = require('coreJS/adapt');
    var Bowser = require('coreJS/libraries/bowser');
    Adapt.device = {};
    var $window = $(window);
    Adapt.device.touch = Modernizr.touch;
    Adapt.once('app:dataReady', function () {
        Adapt.device.screenSize = checkScreenSize();
    });
    Adapt.device.screenWidth = $window.width();
    function checkScreenSize() {
        var screenSize;
        if (Adapt.device.screenWidth > Adapt.config.get('screenSize').medium) {
            screenSize = 'large';
        } else if (Adapt.device.screenWidth > Adapt.config.get('screenSize').small) {
            screenSize = 'medium';
        } else {
            screenSize = 'small';
        }
        return screenSize;
    }
    var onWindowResize = _.debounce(function onScreenSizeChanged() {
        Adapt.device.screenWidth = $window.width();
        Adapt.trigger('device:resize', Adapt.device.screenWidth);
        var newScreenSize = checkScreenSize();
        if (newScreenSize !== Adapt.device.screenSize) {
            Adapt.device.screenSize = newScreenSize;
            Adapt.trigger('device:changed', Adapt.device.screenSize);
        }
    }, 100);
    $window.on('resize', onWindowResize);
    var browser = Bowser.name;
    var version = Bowser.version;
    var OS = Bowser.osversion;
    if (OS == undefined)
        OS = getPlatform();
    function getPlatform() {
        var platform = navigator.platform;
        if (platform.indexOf('Win') != -1) {
            return 'Windows';
        } else if (platform.indexOf('Mac') != -1) {
            return 'Mac';
        } else if (platform.indexOf('Linux') != -1) {
            return 'Linux';
        }
    }
    var browserString = browser + ' version-' + version + ' OS-' + OS;
    Adapt.device.browser = browser;
    Adapt.device.version = version;
    Adapt.device.OS = OS;
    $('html').addClass(browserString);
});

define('coreJS/popupManager', ['coreJS/adapt'], function (require) {
    var Adapt = require('coreJS/adapt');
    var scrollTop = 0;
    var $activeElement;
    var tabIndexElements = 'a, button, input, select, textarea';
    Adapt.on('popup:opened', function () {
        scrollTop = $(window).scrollTop();
        $activeElement = $(document.activeElement);
        $(tabIndexElements).attr('tabindex', -1);
    });
    Adapt.on('popup:closed', function () {
        $(window).scrollTop(scrollTop);
        $(tabIndexElements).attr('tabindex', 0);
        if ($activeElement) {
            if ($activeElement.is(':visible')) {
                $activeElement.focus();
            } else {
                $activeElement.next().focus();
            }
        }
    });
});

define('coreViews/notifyView', ['coreJS/adapt'], function (require) {
    var Adapt = require('coreJS/adapt');
    var NotifyView = Backbone.View.extend({
        className: 'notify',
        initialize: function () {
            this.listenTo(Adapt, 'remove', this.remove);
            this.listenTo(Adapt, 'device:resize', this.resetNotifySize);
            this.render();
        },
        events: {
            'click .notify-popup-alert-button': 'onAlertButtonClicked',
            'click .notify-popup-prompt-button': 'onPromptButtonClicked',
            'click .notify-popup-done': 'onCloseButtonClicked'
        },
        render: function () {
            var data = this.model.toJSON();
            var template = Handlebars.templates['notify'];
            this.$el.html(template(data)).appendTo('body');
            this.showNotify();
            return this;
        },
        onAlertButtonClicked: function (event) {
            event.preventDefault();
            Adapt.trigger(this.model.get('_callbackEvent'), this);
            this.closeNotify();
        },
        onPromptButtonClicked: function (event) {
            event.preventDefault();
            Adapt.trigger($(event.currentTarget).attr('data-event'));
            this.closeNotify();
        },
        onCloseButtonClicked: function (event) {
            event.preventDefault();
            Adapt.trigger('notify:closed');
            this.closeNotify();
        },
        resetNotifySize: function () {
            $('.notify-popup').removeAttr('style');
            this.resizeNotify(true);
        },
        resizeNotify: function (noAnimation) {
            var windowHeight = $(window).height();
            var notifyHeight = this.$('.notify-popup').height();
            var animationSpeed = 400;
            if (notifyHeight > windowHeight) {
                this.$('.notify-popup').css({
                    'height': '100%',
                    'top': 0,
                    'overflow-y': 'scroll',
                    '-webkit-overflow-scrolling': 'touch',
                    'opacity': 1
                });
            } else {
                if (noAnimation) {
                    var animationSpeed = 0;
                }
                this.$('.notify-popup').css({
                    'margin-top': -(notifyHeight / 2) - 50,
                    'opacity': 0
                }).velocity({
                    'margin-top': -(notifyHeight / 2),
                    'opacity': 1
                }, animationSpeed);
            }
        },
        showNotify: function () {
            this.resizeNotify();
            this.$('.notify-popup').show();
            this.$('.notify-shadow').fadeIn('fast');
            if (this.model.get('_type') === 'popup') {
                $('.notify-popup-done').focus();
            } else {
                $('.notify-popup-buttons a').first().focus();
            }
        },
        closeNotify: function (event) {
            this.$el.fadeOut('fast', _.bind(function () {
                this.remove();
            }, this));
            Adapt.trigger('popup:closed');
        }
    });
    return NotifyView;
});

define('coreViews/notifyPushView', [
    'backbone',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    var NotifyPushView = Backbone.View.extend({
        className: 'notify-push',
        initialize: function () {
            this.listenTo(Adapt, 'notify:pushShown notify:pushRemoved', this.updateIndexPosition);
            this.listenTo(this.model.collection, 'remove', this.updateIndexPosition);
            this.listenTo(this.model.collection, 'change:_index', this.updatePushPosition);
            this.listenTo(Adapt, 'remove', this.remove);
            this.preRender();
            this.render();
        },
        events: {
            'click .notify-push-close': 'closePush',
            'click .notify-push-inner': 'triggerEvent'
        },
        preRender: function () {
            this.hasBeenRemoved = false;
        },
        render: function () {
            var data = this.model.toJSON();
            var template = Handlebars.templates['notifyPush'];
            this.$el.html(template(data)).appendTo('#wrapper');
            _.defer(_.bind(function () {
                this.postRender();
            }, this));
            return this;
        },
        postRender: function () {
            this.$el.addClass('show');
            _.delay(_.bind(function () {
                this.closePush();
            }, this), this.model.get('_timeout'));
            Adapt.trigger('notify:pushShown');
        },
        closePush: function (event) {
            if (event) {
                event.preventDefault();
            }
            if (this.hasBeenRemoved === false) {
                this.hasBeenRemoved = true;
                this.$el.removeClass('show');
                _.delay(_.bind(function () {
                    this.model.collection.remove(this.model);
                    Adapt.trigger('notify:pushRemoved', this);
                    this.remove();
                }, this), 600);
            }
        },
        triggerEvent: function (event) {
            Adapt.trigger(this.model.get('_callbackEvent'));
            this.closePush();
        },
        updateIndexPosition: function () {
            if (!this.hasBeenRemoved) {
                this.model.collection.each(function (model, index) {
                    if (model.get('_isActive') === true) {
                        model.set('_index', index);
                        this.updatePushPosition();
                    }
                }, this);
            }
        },
        updatePushPosition: function () {
            if (this.hasBeenRemoved) {
                return;
            }
            if (this.model.get('_index') != undefined) {
                var elementHeight = this.$el.height();
                var offset = 20;
                var navigationHeight = $('.navigation').height();
                var currentIndex = this.model.get('_index');
                var flippedIndex = currentIndex == 0 ? 1 : 0;
                if (this.model.collection.where({ _isActive: true }).length === 1) {
                    flippedIndex = 0;
                }
                var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;
                this.$el.css('top', positionLowerPush);
            }
        }
    });
    return NotifyPushView;
});

define('coreModels/notifyModel', ['backbone'], function (require) {
    var Backbone = require('backbone');
    var NotifyModel = Backbone.Model.extend({
        defaults: {
            _isActive: false,
            _showIcon: false,
            _timeout: 3000
        }
    });
    return NotifyModel;
});

define('coreJS/notify', [
    'coreJS/adapt',
    'coreViews/notifyView',
    'coreViews/notifyPushView',
    'coreModels/notifyModel'
], function (require) {
    var Adapt = require('coreJS/adapt');
    var NotifyView = require('coreViews/notifyView');
    var NotifyPushView = require('coreViews/notifyPushView');
    var NotifyModel = require('coreModels/notifyModel');
    var NotifyPushCollection = Backbone.Collection.extend({
        model: NotifyModel,
        initialize: function () {
            this.listenTo(this, 'add', this.onPushAdded);
            this.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);
        },
        onPushAdded: function (model) {
            this.checkPushCanShow(model);
        },
        checkPushCanShow: function (model) {
            if (this.canShowPush()) {
                model.set('_isActive', true);
                this.showPush(model);
            }
        },
        canShowPush: function () {
            var availablePushNotifications = this.where({ _isActive: true });
            if (availablePushNotifications.length >= 2) {
                return false;
            }
            return true;
        },
        showPush: function (model) {
            new NotifyPushView({ model: model });
        },
        onRemovePush: function (view) {
            var inactivePushNotifications = this.where({ _isActive: false });
            if (inactivePushNotifications.length > 0) {
                this.checkPushCanShow(inactivePushNotifications[0]);
            }
        }
    });
    var NotifyPushes = new NotifyPushCollection();
    Adapt.on('notify:alert', function (notifyObject) {
        addNotifyView('alert', notifyObject);
    });
    Adapt.on('notify:prompt', function (notifyObject) {
        addNotifyView('prompt', notifyObject);
    });
    Adapt.on('notify:popup', function (notifyObject) {
        addNotifyView('popup', notifyObject);
    });
    Adapt.on('notify:push', function (notifyObject) {
        addNotifyView('push', notifyObject);
    });
    function addNotifyView(type, notifyObject) {
        notifyObject._type = type;
        if (type === 'push') {
            NotifyPushes.push(notifyObject);
            return;
        }
        Adapt.trigger('popup:opened');
        new NotifyView({ model: new NotifyModel(notifyObject) });
    }
    ;
});

define('coreViews/accessibilityView', [
    'backbone',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    var AccessibilityView = Backbone.View.extend({
        el: '.accessibility-toggle',
        initialize: function () {
            this.render();
        },
        events: { 'click': 'toggleAccessibility' },
        render: function () {
            var hasAccessibility = Adapt.config.get('_accessibility')._isEnabled;
            var accessibilityOff = Adapt.course.get('_accessibility')._accessibilityToggleTextOff;
            var accessibilityOn = Adapt.course.get('_accessibility')._accessibilityToggleTextOn;
            var toggleText = hasAccessibility ? accessibilityOff : accessibilityOn;
            this.$el.html(toggleText).attr('aria-label', Adapt.course.get('_accessibility')._ariaLabels.accessibilityToggleButton);
        },
        toggleAccessibility: function (event) {
            event.preventDefault();
            var hasAccessibility = Adapt.config.get('_accessibility')._isEnabled;
            var toggleAccessibility = hasAccessibility ? false : true;
            Adapt.config.get('_accessibility')._isEnabled = toggleAccessibility;
            Adapt.trigger('accessibility:toggle');
            this.render();
        }
    });
    return AccessibilityView;
});

define('coreJS/accessibility', [
    'coreJS/adapt',
    'coreViews/accessibilityView'
], function (require) {
    var Adapt = require('coreJS/adapt');
    var AccessibilityView = require('coreViews/accessibilityView');
    var Accessibility = _.extend({
        setupLegacyFocus: function () {
            var tabIndexElements = 'a, button, input, select, textarea';
            $(tabIndexElements).attr('tabindex', 0).on('focus', function () {
                $(this).addClass('focused');
            }).on('blur', function () {
                $(this).removeClass('focused');
            });
            $('object').attr('tabindex', -1);
        },
        removeLegacyFocus: function () {
            var tabIndexElements = 'a, button, input, select, textarea';
            $(tabIndexElements).off('focus').off('blur');
        },
        setupListeners: function () {
            this.listenTo(Adapt, 'pageView:ready menuView:ready', this.setupLegacyFocus);
        },
        setupAccessibility: function () {
            if (Adapt.config.get('_accessibility') && Adapt.config.get('_accessibility')._isEnabled) {
                if ($('html').addClass('accessibility').hasClass('ie8') && Adapt.config.get('_accessibility')._shouldSupportLegacyBrowsers) {
                    this.setupLegacyFocus();
                    this.setupListeners();
                }
            } else {
                $('html').removeClass('accessibility');
                this.removeLegacyFocus();
                this.stopListening(Adapt, 'pageView:ready menuView:ready', this.setupLegacyFocus);
            }
        }
    }, Backbone.Events);
    Adapt.on('accessibility:toggle', Accessibility.setupAccessibility, Accessibility);
    Adapt.once('configModel:dataLoaded', Accessibility.setupAccessibility, Accessibility);
    Adapt.once('app:dataReady', function () {
        new AccessibilityView();
    });
});

define('coreViews/navigationView', [
    'backbone',
    'handlebars',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Handlebars = require('handlebars');
    var Adapt = require('coreJS/adapt');
    var NavigationView = Backbone.View.extend({
        className: 'navigation',
        initialize: function () {
            this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);
            this.template = 'navigation';
            this.preRender();
        },
        events: { 'click a': 'triggerEvent' },
        preRender: function () {
            Adapt.trigger('navigationView:preRender', this);
            this.render();
        },
        render: function () {
            var template = Handlebars.templates[this.template];
            this.$el.html(template(Adapt.course.get('_accessibility')._ariaLabels)).appendTo('#wrapper');
            _.defer(_.bind(function () {
                Adapt.trigger('navigationView:postRender', this);
            }, this));
            return this;
        },
        triggerEvent: function (event) {
            event.preventDefault();
            var currentEvent = $(event.currentTarget).attr('data-event');
            Adapt.trigger('navigation:' + currentEvent);
        },
        hideNavigationButton: function (model) {
            if (model.get('_type') === 'course') {
                $('.navigation-back-button').addClass('display-none');
            } else {
                this.showNavigationButton();
            }
        },
        showNavigationButton: function () {
            $('.navigation-back-button').removeClass('display-none');
        }
    });
    return NavigationView;
});

define('coreJS/adaptCollection', [
    'backbone',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    var AdaptCollection = Backbone.Collection.extend({
        initialize: function (models, options) {
            this.once('reset', this.loadedData, this);
            if (this.url) {
                this.fetch({ reset: true });
            }
        },
        loadedData: function () {
            Adapt.trigger('adaptCollection:dataLoaded');
        }
    });
    return AdaptCollection;
});

define('coreModels/configModel', [
    'backbone',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    var ConfigModel = Backbone.Model.extend({
        defaults: {
            screenSize: {
                small: 520,
                medium: 760,
                large: 1024
            },
            _canLoadData: true
        },
        lockedAttributes: { _canLoadData: {} },
        initialize: function (attrs, options) {
            this.fetch({
                success: _.bind(function () {
                    Adapt.trigger('configModel:dataLoaded');
                    if (this.get('_canLoadData')) {
                        Adapt.trigger('configModel:loadCourseData');
                    }
                }, this),
                error: function () {
                    console.log('Unable to load course/config.json');
                }
            });
        },
        loadData: function () {
        }
    });
    return ConfigModel;
});

define('coreModels/adaptModel', [
    'backbone',
    'coreJS/adapt'
], function (require) {
    var Backbone = require('backbone');
    var Adapt = require('coreJS/adapt');
    var AdaptModel = Backbone.Model.extend({
        defaults: {
            _canShowFeedback: true,
            _isComplete: false,
            _isEnabled: true,
            _isResetOnRevisit: false,
            _isAvailable: true,
            _isOptional: false,
            _isTrackable: true,
            _isReady: false,
            _isVisible: true
        },
        lockedAttributes: {
            _canShowFeedback: {},
            _isResetOnRevisit: {},
            _isAvailable: {},
            _isOptional: {},
            _isTrackable: {},
            _isVisible: {}
        },
        initialize: function () {
            this.lockedAttributes = {
                _isAvailable: {},
                _isOptional: {},
                _isTrackable: {},
                _isVisible: {}
            };
            Adapt.once('app:dataLoaded', this.setupModel, this);
        },
        setupModel: function () {
            if (this.get('_type') === 'page') {
                this._children = 'articles';
            }
            if (this._siblings === 'contentObjects' && this.get('_parentId') !== Adapt.course.get('_id')) {
                this._parent = 'contentObjects';
            }
            if (this._children) {
                Adapt[this._children].on({
                    'change:_isReady': this.checkReadyStatus,
                    'change:_isComplete': this.checkCompletionStatus
                }, this);
            }
            this.init();
        },
        init: function () {
        },
        checkReadyStatus: function () {
            var availableChildren = new Backbone.Collection(this.getChildren().where({ _isAvailable: true }));
            if (availableChildren.findWhere({ _isReady: false }))
                return;
            this.set({ _isReady: true });
        },
        checkCompletionStatus: function () {
            var availableChildren = new Backbone.Collection(this.getChildren().where({ _isAvailable: true }));
            if (availableChildren.findWhere({ _isComplete: false }))
                return;
            this.set({ _isComplete: true });
        },
        findAncestor: function (ancestors) {
            var parent = this.getParent();
            if (this._parent === ancestors) {
                return parent;
            }
            var returnedAncestor = parent.getParent();
            if (parent._parent !== ancestors) {
                returnedAncestor = returnedAncestor.getParent();
            }
            return returnedAncestor;
        },
        findDescendants: function (descendants) {
            if (this._children === descendants) {
                return this.getChildren();
            }
            var allDescendants = [];
            var flattenedDescendants;
            var children = this.getChildren();
            var returnedDescedants;
            function searchChildren(children) {
                children.each(function (model) {
                    var childrensModels = model.getChildren().models;
                    allDescendants.push(childrensModels);
                    flattenedDescendants = _.flatten(allDescendants);
                });
                returnedDescedants = new Backbone.Collection(flattenedDescendants);
                if (children.models[0]._children === descendants) {
                    return;
                } else {
                    allDescendants = [];
                    searchChildren(returnedDescedants);
                }
            }
            searchChildren(children);
            return returnedDescedants;
        },
        getChildren: function () {
            if (this.get('_children'))
                return this.get('_children');
            var children = Adapt[this._children].where({ _parentId: this.get('_id') });
            var childrenCollection = new Backbone.Collection(children);
            this.set('_children', childrenCollection);
            return childrenCollection;
        },
        getParent: function () {
            if (this.get('_parent'))
                return this.get('_parent');
            if (this._parent === 'course') {
                return Adapt.course;
            }
            var parent = Adapt[this._parent].where({ _id: this.get('_parentId') });
            var parent = parent[0];
            this.set('_parent', parent);
            return parent;
        },
        getSiblings: function (passSiblingsAndIncludeSelf) {
            var siblings;
            if (!passSiblingsAndIncludeSelf) {
                if (this._hasSiblingsAndSelf === false) {
                    return this.get('_siblings');
                }
                siblings = _.reject(Adapt[this._siblings].where({ _parentId: this.get('_parentId') }), _.bind(function (model) {
                    return model.get('_id') == this.get('_id');
                }, this));
                this._hasSiblingsAndSelf = false;
            } else {
                if (this._hasSiblingsAndSelf) {
                    return this.get('_siblings');
                }
                siblings = Adapt[this._siblings].where({ _parentId: this.get('_parentId') });
                this._hasSiblingsAndSelf = true;
            }
            var siblingsCollection = new Backbone.Collection(siblings);
            this.set('_siblings', siblingsCollection);
            return siblingsCollection;
        },
        setOnChildren: function (key, value, options) {
            var args = arguments;
            this.set.apply(this, args);
            if (!this._children)
                return;
            this.getChildren().each(function (child) {
                child.setOnChildren.apply(child, args);
            });
        }
    });
    return AdaptModel;
});

define('coreModels/courseModel', [
    'coreModels/adaptModel',
    'coreJS/adapt'
], function (require) {
    var AdaptModel = require('coreModels/adaptModel');
    var Adapt = require('coreJS/adapt');
    var CourseModel = AdaptModel.extend({
        initialize: function (attrs, options) {
            this.on('sync', this.loadedData, this);
            if (this.url) {
                this.fetch();
            }
        },
        loadedData: function () {
            Adapt.trigger('courseModel:dataLoaded');
            this.setupListeners();
        },
        setupListeners: function () {
            Adapt[this._children].on({
                'change:_isReady': this.checkReadyStatus,
                'change:_isComplete': this.checkCompletionStatus
            }, this);
        },
        _children: 'contentObjects'
    });
    return CourseModel;
});

define('coreModels/contentObjectModel', [
    'coreModels/adaptModel',
    'coreJS/adapt'
], function (require) {
    var AdaptModel = require('coreModels/adaptModel');
    var Adapt = require('coreJS/adapt');
    var ContentObjectModel = AdaptModel.extend({
        getCompleteComponentsAsPercentage: function () {
            var children = this.findDescendants('components');
            var availableChildren = children.where({ _isAvailable: true });
            var childrenLength = children.length;
            var completedChildrenLength = children.where({
                _isComplete: true,
                _isAvailable: true
            }).length;
            var completedChildrenAsPercentage = completedChildrenLength / childrenLength * 100;
            this.set({ 'completedChildrenAsPercentage': completedChildrenAsPercentage });
            return completedChildrenAsPercentage;
        },
        _parent: 'course',
        _siblings: 'contentObjects',
        _children: 'contentObjects'
    });
    return ContentObjectModel;
});

define('coreModels/articleModel', [
    'coreModels/adaptModel',
    'coreJS/adapt'
], function (require) {
    var AdaptModel = require('coreModels/adaptModel');
    var Adapt = require('coreJS/adapt');
    var ArticleModel = AdaptModel.extend({
        _parent: 'contentObjects',
        _siblings: 'articles',
        _children: 'blocks'
    });
    return ArticleModel;
});

define('coreModels/blockModel', ['coreModels/adaptModel'], function (require) {
    var AdaptModel = require('coreModels/adaptModel');
    var BlockModel = AdaptModel.extend({
        _parent: 'articles',
        _siblings: 'blocks',
        _children: 'components'
    });
    return BlockModel;
});

define('coreModels/componentModel', [
    'coreJS/adapt',
    'coreModels/adaptModel'
], function (require) {
    var Adapt = require('coreJS/adapt');
    var AdaptModel = require('coreModels/adaptModel');
    var ComponentModel = AdaptModel.extend({
        init: function () {
            var componentType = this.get('_component');
            if (Adapt.componentStore[componentType]) {
                if (Adapt.componentStore[componentType]._isQuestionType) {
                    this.set('_isQuestionType', true);
                }
            }
        },
        _parent: 'blocks',
        _siblings: 'components'
    });
    return ComponentModel;
});

require([
    'coreModels/backboneModel',
    'coreJS/adapt',
    'coreJS/router',
    'coreJS/drawer',
    'coreJS/device',
    'coreJS/popupManager',
    'coreJS/notify',
    'coreJS/accessibility',
    'coreViews/navigationView',
    'coreJS/adaptCollection',
    'coreModels/configModel',
    'coreModels/courseModel',
    'coreModels/contentObjectModel',
    'coreModels/articleModel',
    'coreModels/blockModel',
    'coreModels/componentModel'
], function (BackboneModel, Adapt, Router, Drawer, Device, PopupManager, Notify, Accessibility, NavigationView, AdaptCollection, ConfigModel, CourseModel, ContentObjectModel, ArticleModel, BlockModel, ComponentModel) {
    var template = Handlebars.templates['loading'];
    $('#wrapper').append(template());
    Adapt.config = new ConfigModel(null, {
        url: 'course/config.json',
        reset: true
    });
    function checkDataIsLoaded() {
        if (Adapt.contentObjects.models.length > 0 && Adapt.articles.models.length > 0 && Adapt.blocks.models.length > 0 && Adapt.components.models.length > 0 && Adapt.course.get('_id')) {
            Adapt.trigger('app:dataLoaded');
            Adapt.setupMapping();
            Adapt.trigger('app:dataReady');
            new NavigationView();
            Adapt.initialize();
            Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');
        }
    }
    function loadCourseData() {
        var courseFolder = 'course/' + Adapt.config.get('_defaultLanguage') + '/';
        Adapt.course = new CourseModel(null, {
            url: courseFolder + 'course.json',
            reset: true
        });
        Adapt.contentObjects = new AdaptCollection(null, {
            model: ContentObjectModel,
            url: courseFolder + 'contentObjects.json'
        });
        Adapt.articles = new AdaptCollection(null, {
            model: ArticleModel,
            url: courseFolder + 'articles.json'
        });
        Adapt.blocks = new AdaptCollection(null, {
            model: BlockModel,
            url: courseFolder + 'blocks.json'
        });
        Adapt.components = new AdaptCollection(null, {
            model: ComponentModel,
            url: courseFolder + 'components.json'
        });
    }
    Adapt.once('configModel:loadCourseData', loadCourseData);
    Adapt.on('adaptCollection:dataLoaded courseModel:dataLoaded', checkDataIsLoaded);
});
define('app', [
    'coreModels/backboneModel',
    'coreJS/adapt',
    'coreJS/router',
    'coreJS/drawer',
    'coreJS/device',
    'coreJS/popupManager',
    'coreJS/notify',
    'coreJS/accessibility',
    'coreViews/navigationView',
    'coreJS/adaptCollection',
    'coreModels/configModel',
    'coreModels/courseModel',
    'coreModels/contentObjectModel',
    'coreModels/articleModel',
    'coreModels/blockModel',
    'coreModels/componentModel'
], function () {
    return;
});

